{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BAMON Documentation","text":"<p>Welcome to the BAMON documentation! BAMON (Bash Daemon Monitor) is a powerful tool for monitoring and executing bash scripts at specified intervals.</p>"},{"location":"#what-is-bamon","title":"What is BAMON?","text":"<p>BAMON is a lightweight, configurable monitoring solution that runs as a daemon process, continuously monitoring configured scripts and executing them at specified intervals. It provides:</p> <ul> <li>Automated Script Execution: Run scripts at configurable intervals</li> <li>Sandboxed Environment: Secure execution with resource limits</li> <li>Performance Monitoring: Built-in system metrics and optimization</li> <li>Flexible Configuration: YAML-based configuration with CLI management</li> <li>Comprehensive Status: Detailed execution history and status reporting</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code># Download and install from latest release\ncurl -sSL https://github.com/WawRepo/bamon/releases/latest/download/install-repo.sh | bash\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code># Start the daemon\nbamon start --daemon\n\n# Add a monitoring script\nbamon add health_check --command \"curl -s https://httpbin.org/status/200\" --interval 30\n\n# Check status\nbamon status\n\n# Execute all scripts immediately\nbamon now\n\n# Stop the daemon\nbamon stop\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#automated-monitoring","title":"\ud83d\udd04 Automated Monitoring","text":"<p>Execute scripts at configurable intervals with built-in scheduling.</p>"},{"location":"#sandboxed-execution","title":"\ud83d\udee1\ufe0f Sandboxed Execution","text":"<p>Secure script execution with resource limits and timeout controls.</p>"},{"location":"#performance-monitoring","title":"\ud83d\udcca Performance Monitoring","text":"<p>Built-in system metrics collection and performance optimization.</p>"},{"location":"#flexible-configuration","title":"\u2699\ufe0f Flexible Configuration","text":"<p>YAML-based configuration with comprehensive CLI management.</p>"},{"location":"#comprehensive-status","title":"\ud83d\udd0d Comprehensive Status","text":"<p>Detailed execution history, status reporting, and error tracking.</p>"},{"location":"#easy-installation","title":"\ud83d\ude80 Easy Installation","text":"<p>One-command installation from GitHub releases with automatic setup.</p>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Installation - Detailed installation instructions for different platforms</li> <li>Commands - Complete CLI command reference</li> <li>Configuration - Configuration options and examples</li> <li>Examples - Real-world usage examples and use cases</li> <li>Troubleshooting - Common issues and solutions</li> <li>API Reference - Technical details for developers</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: Browse the sections above for detailed information</li> <li>Issues: Report bugs or request features on GitHub Issues</li> <li>Releases: Check the latest releases for updates</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details on how to contribute to BAMON.</p>"},{"location":"FAQ/","title":"BAMON Frequently Asked Questions (FAQ)","text":""},{"location":"FAQ/#general-questions","title":"General Questions","text":""},{"location":"FAQ/#what-is-bamon","title":"What is BAMON?","text":"<p>BAMON (Bash Daemon Monitor) is a powerful tool for monitoring and executing bash scripts at specified intervals. It provides a comprehensive CLI interface for managing monitored scripts, with features including health checks, system resource monitoring, and automated script execution.</p>"},{"location":"FAQ/#why-should-i-use-bamon-instead-of-cron","title":"Why should I use BAMON instead of cron?","text":"<p>BAMON offers several advantages over cron:</p> <ul> <li>Real-time monitoring: Continuous monitoring with immediate status reporting</li> <li>Resource management: Built-in sandboxing and resource limits</li> <li>Rich status reporting: Detailed execution history and performance metrics</li> <li>CLI management: Easy script management without editing crontab files</li> <li>Error handling: Better error reporting and debugging capabilities</li> <li>Configuration management: YAML-based configuration with validation</li> </ul>"},{"location":"FAQ/#is-bamon-suitable-for-production-use","title":"Is BAMON suitable for production use?","text":"<p>Yes, BAMON is designed for production use with features like: - Sandboxed script execution with resource limits - Comprehensive logging and error handling - Performance monitoring and optimization - Configuration validation and management - Systemd integration support</p>"},{"location":"FAQ/#installation-questions","title":"Installation Questions","text":""},{"location":"FAQ/#how-do-i-install-bamon","title":"How do I install BAMON?","text":"<p>The easiest way is using the installation script:</p> <pre><code>git clone https://github.com/WawRepo/bamon.git\ncd bamon\nchmod +x install.sh\n./install.sh\n</code></pre>"},{"location":"FAQ/#what-are-the-system-requirements","title":"What are the system requirements?","text":"<ul> <li>bash 4.0+ (system default or Homebrew)</li> <li>curl (for HTTP health checks)</li> <li>yq (YAML processor)</li> <li>timeout/gtimeout (GNU coreutils)</li> <li>Standard Unix tools (awk, sed, grep, etc.)</li> </ul>"},{"location":"FAQ/#can-i-install-bamon-without-rubybashly","title":"Can I install BAMON without Ruby/Bashly?","text":"<p>Yes! The simplified installation script doesn't require Ruby or Bashly. It installs a pre-built binary directly from the repository.</p>"},{"location":"FAQ/#how-do-i-set-up-development-environment","title":"How do I set up development environment?","text":"<p>For development, you'll need Ruby and Bashly:</p> <pre><code># macOS\nbrew install ruby\nexport PATH=\"/opt/homebrew/opt/ruby/bin:$PATH\"\nexport PATH=\"$(ruby -r rubygems -e \"puts Gem.bindir\"):$PATH\"\ngem install bashly\n\n# Ubuntu/Debian\nsudo apt install ruby ruby-dev\ngem install bashly\n</code></pre>"},{"location":"FAQ/#configuration-questions","title":"Configuration Questions","text":""},{"location":"FAQ/#where-is-the-configuration-file-located","title":"Where is the configuration file located?","text":"<p>The default configuration file is at <code>~/.config/bamon/config.yaml</code>. You can specify a custom location with the <code>--config</code> option.</p>"},{"location":"FAQ/#how-do-i-edit-the-configuration","title":"How do I edit the configuration?","text":"<p>Use the built-in config management commands:</p> <pre><code># View current configuration\nbamon config show\n\n# Edit configuration\nbamon config edit\n\n# Validate configuration\nbamon config validate\n</code></pre>"},{"location":"FAQ/#what-configuration-options-are-available","title":"What configuration options are available?","text":"<p>Key configuration sections: - daemon: Daemon settings (intervals, logging, concurrency) - sandbox: Script execution limits (timeout, memory, CPU) - performance: Performance monitoring and optimization - scripts: Individual script definitions</p>"},{"location":"FAQ/#can-i-have-multiple-configuration-files","title":"Can I have multiple configuration files?","text":"<p>Yes, you can specify different configuration files:</p> <pre><code>bamon start --config /path/to/custom/config.yaml\n</code></pre>"},{"location":"FAQ/#usage-questions","title":"Usage Questions","text":""},{"location":"FAQ/#how-do-i-start-the-daemon","title":"How do I start the daemon?","text":"<pre><code># Start in background (daemon mode)\nbamon start --daemon\n\n# Start in foreground (for testing)\nbamon start\n</code></pre>"},{"location":"FAQ/#how-do-i-add-a-script-to-monitor","title":"How do I add a script to monitor?","text":"<pre><code>bamon add \"script_name\" \\\n  --command \"your_bash_command\" \\\n  --interval 60 \\\n  --description \"What this script does\"\n</code></pre>"},{"location":"FAQ/#how-do-i-check-the-status-of-all-scripts","title":"How do I check the status of all scripts?","text":"<pre><code># Basic status\nbamon status\n\n# Only failed scripts\nbamon status --failed-only\n\n# JSON output\nbamon status --json\n</code></pre>"},{"location":"FAQ/#how-do-i-remove-a-script-from-monitoring","title":"How do I remove a script from monitoring?","text":"<pre><code>bamon remove script_name\n</code></pre>"},{"location":"FAQ/#how-do-i-execute-all-scripts-immediately","title":"How do I execute all scripts immediately?","text":"<pre><code># Execute all scripts\nbamon now\n\n# Execute specific script\nbamon now --name script_name\n</code></pre>"},{"location":"FAQ/#troubleshooting-questions","title":"Troubleshooting Questions","text":""},{"location":"FAQ/#the-daemon-wont-start-what-should-i-check","title":"The daemon won't start. What should I check?","text":"<ol> <li> <p>Check if another instance is running: <pre><code>bamon status\n</code></pre></p> </li> <li> <p>Check logs for errors: <pre><code>tail -f ~/.local/share/bamon/logs/bamon.log\n</code></pre></p> </li> <li> <p>Verify permissions: <pre><code>ls -la ~/.config/bamon/\n</code></pre></p> </li> <li> <p>Check configuration: <pre><code>bamon config validate\n</code></pre></p> </li> </ol>"},{"location":"FAQ/#scripts-are-not-executing-whats-wrong","title":"Scripts are not executing. What's wrong?","text":"<ol> <li> <p>Check if scripts are enabled: <pre><code>bamon list\n</code></pre></p> </li> <li> <p>Test script manually: <pre><code>bash -c \"your_script_command\"\n</code></pre></p> </li> <li> <p>Check execution logs: <pre><code>bamon status --verbose\n</code></pre></p> </li> <li> <p>Verify script permissions: <pre><code>ls -la /path/to/your/script\n</code></pre></p> </li> </ol>"},{"location":"FAQ/#im-getting-command-not-found-errors-how-do-i-fix-this","title":"I'm getting \"command not found\" errors. How do I fix this?","text":"<p>This usually means the command isn't in the PATH when BAMON runs. Solutions:</p> <ol> <li> <p>Use full paths: <pre><code>bamon add \"check\" --command \"/usr/bin/curl -s https://example.com\"\n</code></pre></p> </li> <li> <p>Set PATH in script: <pre><code>bamon add \"check\" --command \"export PATH=/usr/local/bin:\\$PATH &amp;&amp; your_command\"\n</code></pre></p> </li> <li> <p>Create wrapper script: <pre><code># Create wrapper script with proper PATH\necho '#!/bin/bash\nexport PATH=/usr/local/bin:$PATH\nyour_command' &gt; /path/to/wrapper.sh\nchmod +x /path/to/wrapper.sh\n\nbamon add \"check\" --command \"/path/to/wrapper.sh\"\n</code></pre></p> </li> </ol>"},{"location":"FAQ/#scripts-are-timing-out-how-do-i-fix-this","title":"Scripts are timing out. How do I fix this?","text":"<ol> <li> <p>Check sandbox timeout settings: <pre><code>bamon config show | grep timeout\n</code></pre></p> </li> <li> <p>Increase timeout in configuration: <pre><code>sandbox:\n  timeout: 60  # Increase from default 30 seconds\n</code></pre></p> </li> <li> <p>Optimize script performance:</p> </li> <li>Use more efficient commands</li> <li>Reduce data processing</li> <li>Cache results when possible</li> </ol>"},{"location":"FAQ/#how-do-i-debug-script-execution","title":"How do I debug script execution?","text":"<ol> <li> <p>Run with debug logging: <pre><code>BAMON_VERBOSE=true bamon start\n</code></pre></p> </li> <li> <p>Test script manually: <pre><code>bash -c \"your_script_command\"\n</code></pre></p> </li> <li> <p>Check verbose status: <pre><code>bamon status --verbose\n</code></pre></p> </li> <li> <p>View execution history: <pre><code>cat ~/.config/bamon/execution_history.json | jq .\n</code></pre></p> </li> </ol>"},{"location":"FAQ/#performance-questions","title":"Performance Questions","text":""},{"location":"FAQ/#how-much-system-resources-does-bamon-use","title":"How much system resources does BAMON use?","text":"<p>BAMON is designed to be lightweight: - Memory: &lt; 10MB RAM when idle - CPU: &lt; 1% CPU when idle - Disk: Minimal (logs and configuration files)</p>"},{"location":"FAQ/#how-many-scripts-can-bamon-monitor-simultaneously","title":"How many scripts can BAMON monitor simultaneously?","text":"<p>The default limit is 10 concurrent scripts, but this can be configured:</p> <pre><code>daemon:\n  max_concurrent: 20  # Increase as needed\n</code></pre>"},{"location":"FAQ/#how-do-i-optimize-bamon-performance","title":"How do I optimize BAMON performance?","text":"<ol> <li> <p>Enable performance monitoring: <pre><code>performance:\n  enable_monitoring: true\n  optimize_scheduling: true\n</code></pre></p> </li> <li> <p>Adjust script intervals:</p> </li> <li>Use longer intervals for non-critical checks</li> <li> <p>Group related checks together</p> </li> <li> <p>Monitor system load: <pre><code>bamon performance\n</code></pre></p> </li> </ol>"},{"location":"FAQ/#security-questions","title":"Security Questions","text":""},{"location":"FAQ/#is-bamon-secure-for-production-use","title":"Is BAMON secure for production use?","text":"<p>Yes, BAMON includes several security features: - Sandboxing: Scripts run in isolated environments - Resource limits: CPU, memory, and file size limits - Permission isolation: Scripts run with user permissions - Input validation: All inputs are validated before execution</p>"},{"location":"FAQ/#how-do-i-run-bamon-securely","title":"How do I run BAMON securely?","text":"<ol> <li> <p>Use dedicated user: <pre><code>sudo useradd -r -s /bin/false bamon\nsudo -u bamon bamon start --daemon\n</code></pre></p> </li> <li> <p>Limit script permissions:</p> </li> <li>Use specific users for sensitive operations</li> <li> <p>Avoid running as root when possible</p> </li> <li> <p>Validate script content:</p> </li> <li>Review scripts before adding them</li> <li>Use trusted script sources</li> </ol>"},{"location":"FAQ/#can-scripts-access-sensitive-system-files","title":"Can scripts access sensitive system files?","text":"<p>Scripts run with the permissions of the user who started BAMON. If you start BAMON as a regular user, scripts won't have access to system files unless explicitly granted.</p>"},{"location":"FAQ/#integration-questions","title":"Integration Questions","text":""},{"location":"FAQ/#can-i-integrate-bamon-with-monitoring-systems","title":"Can I integrate BAMON with monitoring systems?","text":"<p>Yes, BAMON supports several integration methods:</p> <ol> <li> <p>JSON output for APIs: <pre><code>bamon status --json | curl -X POST -d @- https://monitoring-api.com/webhook\n</code></pre></p> </li> <li> <p>Log file monitoring: <pre><code>tail -f ~/.local/share/bamon/logs/bamon.log | logger -t bamon\n</code></pre></p> </li> <li> <p>Custom webhooks: <pre><code># Create webhook script\nbamon add \"webhook\" --command \"curl -X POST https://webhook.url -d '{\\\"status\\\": \\\"ok\\\"}'\"\n</code></pre></p> </li> </ol>"},{"location":"FAQ/#can-i-use-bamon-with-systemd","title":"Can I use BAMON with systemd?","text":"<p>Yes, you can create a systemd service file:</p> <pre><code>[Unit]\nDescription=BAMON Daemon Monitor\nAfter=network.target\n\n[Service]\nType=forking\nUser=bamon\nGroup=bamon\nExecStart=/usr/local/bin/bamon start --daemon\nExecStop=/usr/local/bin/bamon stop\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"FAQ/#can-i-use-bamon-in-docker-containers","title":"Can I use BAMON in Docker containers?","text":"<p>Yes, BAMON works well in Docker containers. Consider:</p> <ol> <li>Use appropriate base images with required dependencies</li> <li>Set proper resource limits in Docker</li> <li>Mount configuration from host or use environment variables</li> <li>Handle logging appropriately for containerized environments</li> </ol>"},{"location":"FAQ/#advanced-questions","title":"Advanced Questions","text":""},{"location":"FAQ/#how-do-i-create-custom-monitoring-scripts","title":"How do I create custom monitoring scripts?","text":"<ol> <li> <p>Create script file: <pre><code>cat &gt; ~/.config/bamon/samples/custom_check.sh &lt;&lt; 'EOF'\n#!/bin/bash\n# Your monitoring logic here\nif [ condition ]; then\n    echo \"OK: Everything is fine\"\n    exit 0\nelse\n    echo \"ERROR: Something is wrong\"\n    exit 1\nfi\nEOF\n\nchmod +x ~/.config/bamon/samples/custom_check.sh\n</code></pre></p> </li> <li> <p>Add to BAMON: <pre><code>bamon add \"custom_check\" \\\n  --command \"~/.config/bamon/samples/custom_check.sh\" \\\n  --interval 300\n</code></pre></p> </li> </ol>"},{"location":"FAQ/#how-do-i-monitor-multiple-servers-with-bamon","title":"How do I monitor multiple servers with BAMON?","text":"<p>For multiple servers, consider:</p> <ol> <li>Centralized monitoring: Run BAMON on a central server that monitors remote services</li> <li>Distributed monitoring: Run BAMON on each server and aggregate results</li> <li>Hybrid approach: Local monitoring with centralized reporting</li> </ol>"},{"location":"FAQ/#can-i-use-bamon-for-cicd-pipelines","title":"Can I use BAMON for CI/CD pipelines?","text":"<p>Yes, BAMON can be integrated into CI/CD:</p> <ol> <li>Pre-deployment checks: Verify system health before deployment</li> <li>Post-deployment verification: Ensure services are running after deployment</li> <li>Continuous monitoring: Monitor application health during development</li> </ol>"},{"location":"FAQ/#how-do-i-backup-bamon-configuration","title":"How do I backup BAMON configuration?","text":"<pre><code># Backup configuration\ncp -r ~/.config/bamon /backup/bamon-$(date +%Y%m%d)\n\n# Backup specific files\ncp ~/.config/bamon/config.yaml /backup/\ncp ~/.config/bamon/samples/ /backup/ -r\n</code></pre>"},{"location":"FAQ/#getting-help","title":"Getting Help","text":""},{"location":"FAQ/#where-can-i-get-help","title":"Where can I get help?","text":"<ol> <li>Documentation: Check the README.md and examples</li> <li>Issues: Open an issue on GitHub</li> <li>Community: Join discussions in the project repository</li> <li>Verbose mode: Use <code>BAMON_VERBOSE=true</code> for detailed logging</li> </ol>"},{"location":"FAQ/#how-do-i-report-bugs","title":"How do I report bugs?","text":"<ol> <li>Check existing issues on GitHub</li> <li>Create new issue with:</li> <li>BAMON version (<code>bamon --version</code>)</li> <li>System information (<code>uname -a</code>)</li> <li>Configuration (<code>bamon config show</code>)</li> <li>Error logs (<code>tail -f ~/.local/share/bamon/logs/bamon.log</code>)</li> <li>Steps to reproduce</li> </ol>"},{"location":"FAQ/#how-do-i-contribute-to-bamon","title":"How do I contribute to BAMON?","text":"<ol> <li>Fork the repository</li> <li>Create feature branch</li> <li>Make changes and test</li> <li>Submit pull request</li> </ol> <p>See the Contributing Guide for detailed instructions.</p> <p>Still have questions? Open an issue or check the examples for more detailed usage scenarios.</p>"},{"location":"api/","title":"API Reference","text":"<p>Technical details and API reference for BAMON developers.</p>"},{"location":"api/#configuration-api","title":"Configuration API","text":""},{"location":"api/#configuration-structure","title":"Configuration Structure","text":"<pre><code># BAMON Configuration Schema\ndaemon:\n  default_interval: integer          # Default execution interval in seconds\n  log_file: string                   # Log file path (supports ~ expansion)\n  pid_file: string                   # PID file path (supports ~ expansion)\n  max_concurrent: integer            # Maximum concurrent script executions\n\nsandbox:\n  timeout: integer                   # Script execution timeout in seconds\n  max_cpu_time: integer              # Maximum CPU time in seconds\n  max_file_size: integer              # Maximum file size in KB\n  max_virtual_memory: integer        # Maximum virtual memory in KB\n\nperformance:\n  enable_monitoring: boolean         # Enable performance monitoring\n  load_threshold: float              # System load threshold for optimization\n  optimize_scheduling: boolean       # Enable intelligent scheduling\n\nscripts:\n  - name: string                     # Unique script identifier\n    command: string                  # Bash command to execute\n    interval: integer                # Execution interval in seconds\n    enabled: boolean                 # Whether script is enabled\n    description: string              # Human-readable description\n</code></pre>"},{"location":"api/#configuration-validation","title":"Configuration Validation","text":"<pre><code># Validate configuration syntax\nbamon config validate\n\n# Validate with verbose output\nbamon config validate --verbose\n</code></pre>"},{"location":"api/#cli-api","title":"CLI API","text":""},{"location":"api/#command-structure","title":"Command Structure","text":"<pre><code>bamon &lt;command&gt; [options] [arguments]\n</code></pre>"},{"location":"api/#global-options","title":"Global Options","text":"Option Type Description <code>--help</code> flag Show help message for the command <code>--version</code> flag Show version information <code>--config</code> string Specify custom configuration file path"},{"location":"api/#status-command-api","title":"Status Command API","text":"<pre><code>bamon status [options]\n</code></pre> <p>Options: - <code>--verbose</code> (<code>-v</code>): Show detailed information including full output - <code>--failed-only</code> (<code>-f</code>): Show only failed scripts - <code>--json</code> (<code>-j</code>): Output in JSON format - <code>--name</code> (<code>-n</code>): Check status of a specific script</p> <p>JSON Output Format: <pre><code>{\n  \"scripts\": [\n    {\n      \"name\": \"string\",\n      \"status\": \"success|failed|running|disabled|never\",\n      \"last_run\": \"ISO8601_timestamp\",\n      \"next_run\": \"ISO8601_timestamp\",\n      \"interval\": \"integer\",\n      \"command\": \"string\",\n      \"output\": \"string\",\n      \"error\": \"string\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/#add-command-api","title":"Add Command API","text":"<pre><code>bamon add &lt;name&gt; [options]\n</code></pre> <p>Required Arguments: - <code>name</code>: Script name/ID (must be unique)</p> <p>Options: - <code>--command</code> (<code>-c</code>): Bash command/code to execute (required) - <code>--interval</code> (<code>-i</code>): Execution interval in seconds (default: 60) - <code>--description</code> (<code>-d</code>): Description of what the script does - <code>--enabled</code>: Set script as enabled (default) - <code>--disabled</code>: Set script as disabled</p>"},{"location":"api/#remove-command-api","title":"Remove Command API","text":"<pre><code>bamon remove &lt;name&gt; [options]\n</code></pre> <p>Required Arguments: - <code>name</code>: Script name/ID to remove</p> <p>Options: - <code>--force</code> (<code>-f</code>): Remove without confirmation</p>"},{"location":"api/#list-command-api","title":"List Command API","text":"<pre><code>bamon list [options]\n</code></pre> <p>Options: - <code>--enabled-only</code> (<code>-e</code>): Show only enabled scripts - <code>--disabled-only</code> (<code>-d</code>): Show only disabled scripts - <code>--json</code>: Output in JSON format</p>"},{"location":"api/#now-command-api","title":"Now Command API","text":"<pre><code>bamon now [options]\n</code></pre> <p>Options: - <code>--name</code> (<code>-n</code>): Execute only specific script by name</p>"},{"location":"api/#daemon-commands-api","title":"Daemon Commands API","text":""},{"location":"api/#start-command","title":"Start Command","text":"<pre><code>bamon start [options]\n</code></pre> <p>Options: - <code>--daemon</code> (<code>-d</code>): Run in background (daemon mode) - <code>--config</code> (<code>-c</code>): Specify custom config file path</p>"},{"location":"api/#stop-command","title":"Stop Command","text":"<pre><code>bamon stop [options]\n</code></pre> <p>Options: - <code>--force</code> (<code>-f</code>): Force kill the daemon</p>"},{"location":"api/#restart-command","title":"Restart Command","text":"<pre><code>bamon restart [options]\n</code></pre> <p>Options: - <code>--daemon</code> (<code>-d</code>): Run in background (daemon mode) - <code>--config</code> (<code>-c</code>): Specify custom config file path</p>"},{"location":"api/#performance-command-api","title":"Performance Command API","text":"<pre><code>bamon performance [options]\n</code></pre> <p>Options: - <code>--verbose</code> (<code>-v</code>): Show detailed performance information - <code>--format</code> (<code>-f</code>): Output format (table, json) - <code>--json</code>: Output in JSON format</p> <p>JSON Output Format: <pre><code>{\n  \"system\": {\n    \"load_average\": \"float\",\n    \"memory_usage\": \"float\",\n    \"disk_usage\": \"float\",\n    \"cpu_usage\": \"float\"\n  },\n  \"bamon\": {\n    \"active_scripts\": \"integer\",\n    \"total_executions\": \"integer\",\n    \"failed_executions\": \"integer\",\n    \"average_execution_time\": \"float\"\n  }\n}\n</code></pre></p>"},{"location":"api/#config-command-api","title":"Config Command API","text":""},{"location":"api/#config-show","title":"Config Show","text":"<pre><code>bamon config show [options]\n</code></pre> <p>Options: - <code>--pretty</code> (<code>-p</code>): Pretty print the YAML output</p>"},{"location":"api/#config-edit","title":"Config Edit","text":"<pre><code>bamon config edit [options]\n</code></pre> <p>Options: - <code>--editor</code> (<code>-e</code>): Specify editor to use (default: EDITOR env var or vi)</p>"},{"location":"api/#config-validate","title":"Config Validate","text":"<pre><code>bamon config validate [options]\n</code></pre> <p>Options: - <code>--verbose</code> (<code>-v</code>): Show detailed validation information</p>"},{"location":"api/#config-reset","title":"Config Reset","text":"<pre><code>bamon config reset [options]\n</code></pre> <p>Options: - <code>--force</code> (<code>-f</code>): Reset without confirmation prompt</p>"},{"location":"api/#environment-variables","title":"Environment Variables","text":""},{"location":"api/#configuration-override","title":"Configuration Override","text":"Variable Type Description <code>BAMON_CONFIG_FILE</code> string Override default configuration file path <code>BAMON_VERBOSE</code> boolean Enable verbose logging (true/false) <code>BAMON_LOG_FILE</code> string Override default log file path"},{"location":"api/#usage-examples","title":"Usage Examples","text":"<pre><code># Use custom configuration file\nexport BAMON_CONFIG_FILE=\"/path/to/custom/config.yaml\"\nbamon status\n\n# Enable verbose logging\nexport BAMON_VERBOSE=true\nbamon start --daemon\n\n# Custom log file\nexport BAMON_LOG_FILE=\"/var/log/bamon/custom.log\"\nbamon start --daemon\n</code></pre>"},{"location":"api/#exit-codes","title":"Exit Codes","text":""},{"location":"api/#standard-exit-codes","title":"Standard Exit Codes","text":"Code Description 0 Success 1 General error 2 Configuration error 3 Script execution error 4 Daemon already running 5 Daemon not running"},{"location":"api/#script-exit-codes","title":"Script Exit Codes","text":"<p>Scripts should follow standard Unix exit codes:</p> Code Description 0 Success 1 General error 2 Misuse of shell builtins 126 Command invoked cannot execute 127 Command not found 128 Invalid exit argument 130 Script terminated by Ctrl+C"},{"location":"api/#file-system-api","title":"File System API","text":""},{"location":"api/#default-file-locations","title":"Default File Locations","text":""},{"location":"api/#user-installation","title":"User Installation","text":"<ul> <li>Binary: <code>~/.local/bin/bamon</code></li> <li>Configuration: <code>~/.config/bamon/config.yaml</code></li> <li>Logs: <code>~/.local/share/bamon/logs/bamon.log</code></li> <li>PID: <code>~/.local/share/bamon/bamon.pid</code></li> <li>History: <code>~/.config/bamon/execution_history.json</code></li> </ul>"},{"location":"api/#system-installation","title":"System Installation","text":"<ul> <li>Binary: <code>/usr/local/bin/bamon</code></li> <li>Configuration: <code>/etc/bamon/config.yaml</code></li> <li>Logs: <code>/var/log/bamon/bamon.log</code></li> <li>PID: <code>/var/run/bamon.pid</code></li> <li>History: <code>/var/lib/bamon/execution_history.json</code></li> </ul>"},{"location":"api/#file-permissions","title":"File Permissions","text":"<pre><code># Binary permissions\nchmod 755 /usr/local/bin/bamon\n\n# Configuration permissions\nchmod 644 /etc/bamon/config.yaml\n\n# Log directory permissions\nchmod 755 /var/log/bamon/\nchmod 644 /var/log/bamon/bamon.log\n\n# PID file permissions\nchmod 644 /var/run/bamon.pid\n</code></pre>"},{"location":"api/#logging-api","title":"Logging API","text":""},{"location":"api/#log-format","title":"Log Format","text":"<pre><code>[timestamp] [script_name] message\n</code></pre> <p>Example: <pre><code>[2024-01-15 10:30:15] [health_check] Script executed successfully\n[2024-01-15 10:30:15] [health_check] Output: 200\n[2024-01-15 10:30:15] [disk_usage] Script execution failed: exit code 1\n</code></pre></p>"},{"location":"api/#log-levels","title":"Log Levels","text":"<ul> <li>INFO: General information</li> <li>WARN: Warning messages</li> <li>ERROR: Error messages</li> <li>DEBUG: Debug information (when verbose enabled)</li> </ul>"},{"location":"api/#log-rotation","title":"Log Rotation","text":"<pre><code># Manual log rotation\nmv ~/.local/share/bamon/logs/bamon.log ~/.local/share/bamon/logs/bamon.log.old\ntouch ~/.local/share/bamon/logs/bamon.log\nbamon restart\n</code></pre>"},{"location":"api/#integration-api","title":"Integration API","text":""},{"location":"api/#webhook-integration","title":"Webhook Integration","text":"<pre><code># Send webhook on script failure\nbamon add webhook_alert \\\n  --command \"curl -X POST -H 'Content-Type: application/json' -d '{\\\"status\\\":\\\"down\\\",\\\"service\\\":\\\"api\\\"}' https://monitoring.example.com/webhook\" \\\n  --interval 300\n</code></pre>"},{"location":"api/#slack-integration","title":"Slack Integration","text":"<pre><code># Send Slack notification\nbamon add slack_alert \\\n  --command \"curl -X POST -H 'Content-type: application/json' --data '{\\\"text\\\":\\\"System alert: Service is down\\\"}' https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\" \\\n  --interval 300\n</code></pre>"},{"location":"api/#email-integration","title":"Email Integration","text":"<pre><code># Send email notification\nbamon add email_alert \\\n  --command \"echo 'System alert: Service is down' | mail -s 'BAMON Alert' admin@example.com\" \\\n  --interval 600\n</code></pre>"},{"location":"api/#performance-api","title":"Performance API","text":""},{"location":"api/#system-metrics","title":"System Metrics","text":"<pre><code># Get system performance metrics\nbamon performance --json | jq '.system'\n</code></pre>"},{"location":"api/#bamon-metrics","title":"BAMON Metrics","text":"<pre><code># Get BAMON performance metrics\nbamon performance --json | jq '.bamon'\n</code></pre>"},{"location":"api/#custom-metrics","title":"Custom Metrics","text":"<pre><code># Add custom performance monitoring\nbamon add custom_metrics \\\n  --command \"echo 'custom_metric_value' | curl -X POST -d @- https://metrics.example.com/api/metrics\" \\\n  --interval 60\n</code></pre>"},{"location":"api/#security-api","title":"Security API","text":""},{"location":"api/#sandbox-configuration","title":"Sandbox Configuration","text":"<pre><code>sandbox:\n  timeout: 30                    # Script execution timeout\n  max_cpu_time: 60               # Maximum CPU time\n  max_file_size: 10240           # Maximum file size (KB)\n  max_virtual_memory: 102400     # Maximum virtual memory (KB)\n</code></pre>"},{"location":"api/#resource-limits","title":"Resource Limits","text":"<pre><code># Check current resource usage\nbamon performance --verbose\n\n# Monitor resource usage over time\nwatch -n 1 'bamon performance --json | jq \".system\"'\n</code></pre>"},{"location":"api/#development-api","title":"Development API","text":""},{"location":"api/#testing-scripts","title":"Testing Scripts","text":"<pre><code># Test script execution\nbamon now --name script_name\n\n# Test with custom configuration\nbamon --config test-config.yaml now --name script_name\n</code></pre>"},{"location":"api/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable debug mode\nexport BAMON_VERBOSE=true\nbamon start --daemon\n\n# Check debug logs\ntail -f ~/.local/share/bamon/logs/bamon.log\n</code></pre>"},{"location":"api/#configuration-management","title":"Configuration Management","text":"<pre><code># Backup configuration\ncp ~/.config/bamon/config.yaml ~/.config/bamon/config.yaml.backup\n\n# Restore configuration\ncp ~/.config/bamon/config.yaml.backup ~/.config/bamon/config.yaml\nbamon restart\n</code></pre>"},{"location":"bamon.1/","title":"Bamon.1","text":"<p>% BAMON(1) Bash Daemon Monitor 1.0.0 % BAMON Project % September 2024</p>"},{"location":"bamon.1/#name","title":"NAME","text":"<p>bamon - Bash Daemon Monitor</p>"},{"location":"bamon.1/#synopsis","title":"SYNOPSIS","text":"<p>bamon command [options]</p>"},{"location":"bamon.1/#description","title":"DESCRIPTION","text":"<p>Bash Daemon Monitor (bamon) is a powerful tool for monitoring and executing bash scripts at specified intervals. It provides a comprehensive CLI interface for managing monitored scripts, with features including health checks, system resource monitoring, and automated script execution.</p> <p>BAMON runs as a daemon process that continuously monitors configured scripts and executes them at specified intervals. It provides detailed status reporting, execution history, and performance metrics.</p>"},{"location":"bamon.1/#commands","title":"COMMANDS","text":"<p>status [options] : Display current status of all configured scripts with execution details</p> <p>add name [options] : Add a new script to monitor with specified command and interval</p> <p>remove name [options] : Remove a script from monitoring</p> <p>list [options] : List all configured scripts with their current status</p> <p>now [options] : Execute all enabled scripts immediately (manual trigger)</p> <p>start [options] : Start the daemon process</p> <p>stop [options] : Stop the daemon process</p> <p>restart [options] : Restart the daemon process</p> <p>config subcommand [options] : Configuration management commands</p> <p>performance [options] : Show system performance metrics and optimization status</p>"},{"location":"bamon.1/#options","title":"OPTIONS","text":""},{"location":"bamon.1/#global-options","title":"Global Options","text":"<p>--help, -h : Show help message for the command</p> <p>--version, -v : Show version information</p> <p>--config file : Specify custom configuration file path</p>"},{"location":"bamon.1/#status-command-options","title":"Status Command Options","text":"<p>--verbose, -v : Show detailed information including full output</p> <p>--failed-only, -f : Show only failed scripts</p> <p>--json : Output results in JSON format</p> <p>--name script_name : Show status for specific script only</p>"},{"location":"bamon.1/#add-command-options","title":"Add Command Options","text":"<p>--command, -c command : Bash command/code to execute (required)</p> <p>--interval, -i seconds : Execution interval in seconds (default: 60)</p> <p>--description, -d text : Description of what the script does</p> <p>--enabled : Set script as enabled (default)</p> <p>--disabled : Set script as disabled</p>"},{"location":"bamon.1/#remove-command-options","title":"Remove Command Options","text":"<p>--force, -f : Remove without confirmation prompt</p>"},{"location":"bamon.1/#list-command-options","title":"List Command Options","text":"<p>--enabled-only, -e : Show only enabled scripts</p> <p>--disabled-only, -d : Show only disabled scripts</p> <p>--json : Output results in JSON format</p>"},{"location":"bamon.1/#now-command-options","title":"Now Command Options","text":"<p>--name, -n script_name : Execute only specific script by name</p>"},{"location":"bamon.1/#start-command-options","title":"Start Command Options","text":"<p>--daemon, -d : Run in background (daemon mode)</p> <p>--foreground : Run in foreground (default)</p>"},{"location":"bamon.1/#stop-command-options","title":"Stop Command Options","text":"<p>--force, -f : Force kill the daemon process</p>"},{"location":"bamon.1/#config-command-options","title":"Config Command Options","text":"<p>show : Display current configuration in YAML format</p> <p>edit : Open configuration file in default editor</p> <p>validate : Validate configuration file syntax and structure</p>"},{"location":"bamon.1/#performance-command-options","title":"Performance Command Options","text":"<p>--json : Output performance metrics in JSON format</p> <p>--verbose, -v : Show detailed performance information</p>"},{"location":"bamon.1/#files","title":"FILES","text":"<p>~/.config/bamon/config.yaml : Default configuration file</p> <p>~/.local/share/bamon/logs/bamon.log : Default log file</p> <p>~/.local/share/bamon/bamon.pid : Default PID file</p> <p>~/.config/bamon/execution_history.json : Execution history storage</p> <p>~/.config/bamon/samples/ : Sample monitoring scripts directory</p>"},{"location":"bamon.1/#configuration","title":"CONFIGURATION","text":"<p>BAMON uses YAML configuration files. The main configuration file is located at <code>~/.config/bamon/config.yaml</code> by default.</p>"},{"location":"bamon.1/#configuration-structure","title":"Configuration Structure","text":"<pre><code>daemon:\n  default_interval: 60\n  log_file: \"~/.local/share/bamon/logs/bamon.log\"\n  pid_file: \"~/.local/share/bamon/bamon.pid\"\n  max_concurrent: 10\n\nsandbox:\n  timeout: 30\n  max_cpu_time: 60\n  max_file_size: 10240\n  max_virtual_memory: 102400\n\nperformance:\n  enable_monitoring: true\n  load_threshold: 0.8\n  optimize_scheduling: true\n\nscripts:\n  - name: \"script_name\"\n    command: \"bash_command_to_execute\"\n    interval: 60\n    enabled: true\n    description: \"Script description\"\n</code></pre>"},{"location":"bamon.1/#environment-variables","title":"Environment Variables","text":"<p>BAMON_CONFIG_FILE : Override default configuration file path</p> <p>BAMON_VERBOSE : Enable verbose logging (true/false)</p> <p>BAMON_LOG_FILE : Override default log file path</p>"},{"location":"bamon.1/#examples","title":"EXAMPLES","text":""},{"location":"bamon.1/#basic-usage","title":"Basic Usage","text":"<p>Start the daemon in background: <pre><code>bamon start --daemon\n</code></pre></p> <p>Add a script to monitor disk space: <pre><code>bamon add disk_check \\\n  --command \"df -h / | awk 'NR==2 {print \\$5}' | sed 's/%//' | awk '{if(\\$1&gt;80) exit 1; else exit 0}'\" \\\n  --interval 300 \\\n  --description \"Check if disk usage is under 80%\"\n</code></pre></p> <p>Check status of all scripts: <pre><code>bamon status\n</code></pre></p> <p>Execute all scripts immediately: <pre><code>bamon now\n</code></pre></p> <p>Stop the daemon: <pre><code>bamon stop\n</code></pre></p>"},{"location":"bamon.1/#advanced-usage","title":"Advanced Usage","text":"<p>Monitor HTTP health check: <pre><code>bamon add health_check \\\n  --command \"curl -s -o /dev/null -w '%{http_code}' https://httpbin.org/status/200\" \\\n  --interval 30 \\\n  --description \"Check if httpbin.org is accessible\"\n</code></pre></p> <p>Monitor system memory usage: <pre><code>bamon add memory_check \\\n  --command \"free -m | awk '/^Mem:/ {print \\$3/\\$2 * 100.0}' | awk '{if(\\$1&gt;85) exit 1; else exit 0}'\" \\\n  --interval 300 \\\n  --description \"Alert if memory usage exceeds 85%\"\n</code></pre></p> <p>Check if a service is running: <pre><code>bamon add nginx_check \\\n  --command \"pgrep nginx &gt; /dev/null || exit 1\" \\\n  --interval 60 \\\n  --description \"Check if Nginx is running\"\n</code></pre></p>"},{"location":"bamon.1/#configuration-management","title":"Configuration Management","text":"<p>View current configuration: <pre><code>bamon config show\n</code></pre></p> <p>Edit configuration file: <pre><code>bamon config edit\n</code></pre></p> <p>Validate configuration: <pre><code>bamon config validate\n</code></pre></p>"},{"location":"bamon.1/#performance-monitoring","title":"Performance Monitoring","text":"<p>View performance metrics: <pre><code>bamon performance\n</code></pre></p> <p>Get detailed performance information: <pre><code>bamon performance --verbose\n</code></pre></p>"},{"location":"bamon.1/#exit-status","title":"EXIT STATUS","text":"<p>0 : Success</p> <p>1 : General error</p> <p>2 : Configuration error</p> <p>3 : Script execution error</p> <p>4 : Daemon already running</p> <p>5 : Daemon not running</p>"},{"location":"bamon.1/#security-considerations","title":"SECURITY CONSIDERATIONS","text":"<ul> <li>All scripts run in a sandboxed environment with resource limits</li> <li>Scripts execute with the permissions of the user who started the daemon</li> <li>Sensitive information should not be included directly in script commands</li> <li>Use environment variables or secure credential storage for sensitive data</li> <li>Consider running BAMON with a dedicated user with minimal permissions</li> </ul>"},{"location":"bamon.1/#troubleshooting","title":"TROUBLESHOOTING","text":""},{"location":"bamon.1/#common-issues","title":"Common Issues","text":"<p>Daemon fails to start: - Check if another instance is running: <code>bamon status</code> - Verify permissions on configuration directory: <code>ls -la ~/.config/bamon/</code> - Check logs for specific errors: <code>tail -f ~/.local/share/bamon/logs/bamon.log</code></p> <p>Scripts not executing: - Verify script is enabled: <code>bamon list</code> - Check script syntax: <code>bash -n your_script.sh</code> - Review execution logs: <code>bamon status --verbose</code></p> <p>Configuration errors: - Validate configuration: <code>bamon config validate</code> - Check YAML syntax: <code>yq eval . ~/.config/bamon/config.yaml</code></p>"},{"location":"bamon.1/#debug-mode","title":"Debug Mode","text":"<p>Run with verbose logging: <pre><code>BAMON_VERBOSE=true bamon start\n</code></pre></p>"},{"location":"bamon.1/#see-also","title":"SEE ALSO","text":"<p>bash(1), curl(1), yq(1), systemd(1), bashly(1)</p> <p>For more information about the Bashly CLI framework used to build BAMON, see: https://github.com/DannyBen/bashly</p>"},{"location":"bamon.1/#bugs","title":"BUGS","text":"<p>Report bugs at https://github.com/WawRepo/bamon/issues</p>"},{"location":"bamon.1/#author","title":"AUTHOR","text":"<p>BAMON Project Team</p>"},{"location":"bamon.1/#copyright","title":"COPYRIGHT","text":"<p>Copyright \u00a9 2024 BAMON Project. Licensed under the MIT License.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>BAMON uses YAML configuration files to define monitoring behavior, script settings, and system parameters.</p>"},{"location":"configuration/#configuration-file-location","title":"Configuration File Location","text":"<ul> <li>User installation: <code>~/.config/bamon/config.yaml</code></li> <li>System installation: <code>/etc/bamon/config.yaml</code></li> <li>Custom location: Use <code>--config</code> option or <code>BAMON_CONFIG_FILE</code> environment variable</li> </ul>"},{"location":"configuration/#configuration-structure","title":"Configuration Structure","text":"<pre><code>daemon:\n  default_interval: 60\n  log_file: \"~/.local/share/bamon/logs/bamon.log\"\n  pid_file: \"~/.local/share/bamon/bamon.pid\"\n  max_concurrent: 10\n\nsandbox:\n  timeout: 30\n  max_cpu_time: 60\n  max_file_size: 10240\n  max_virtual_memory: 102400\n\nperformance:\n  enable_monitoring: true\n  load_threshold: 0.8\n  optimize_scheduling: true\n\nscripts:\n  - name: \"script_name\"\n    command: \"bash_command_to_execute\"\n    interval: 60\n    enabled: true\n    description: \"Script description\"\n</code></pre>"},{"location":"configuration/#daemon-configuration","title":"Daemon Configuration","text":""},{"location":"configuration/#basic-settings","title":"Basic Settings","text":"Setting Default Description <code>default_interval</code> 60 Default execution interval in seconds <code>log_file</code> <code>~/.local/share/bamon/logs/bamon.log</code> Log file path <code>pid_file</code> <code>~/.local/share/bamon/bamon.pid</code> PID file path <code>max_concurrent</code> 10 Maximum concurrent script executions"},{"location":"configuration/#example","title":"Example","text":"<pre><code>daemon:\n  default_interval: 120\n  log_file: \"/var/log/bamon/bamon.log\"\n  pid_file: \"/var/run/bamon.pid\"\n  max_concurrent: 5\n</code></pre>"},{"location":"configuration/#sandbox-configuration","title":"Sandbox Configuration","text":""},{"location":"configuration/#security-settings","title":"Security Settings","text":"Setting Default Description <code>timeout</code> 30 Script execution timeout in seconds <code>max_cpu_time</code> 60 Maximum CPU time in seconds <code>max_file_size</code> 10240 Maximum file size in KB <code>max_virtual_memory</code> 102400 Maximum virtual memory in KB"},{"location":"configuration/#example_1","title":"Example","text":"<pre><code>sandbox:\n  timeout: 60\n  max_cpu_time: 120\n  max_file_size: 20480\n  max_virtual_memory: 204800\n</code></pre>"},{"location":"configuration/#performance-configuration","title":"Performance Configuration","text":""},{"location":"configuration/#monitoring-settings","title":"Monitoring Settings","text":"Setting Default Description <code>enable_monitoring</code> true Enable performance monitoring <code>load_threshold</code> 0.8 System load threshold for optimization <code>optimize_scheduling</code> true Enable intelligent scheduling"},{"location":"configuration/#example_2","title":"Example","text":"<pre><code>performance:\n  enable_monitoring: true\n  load_threshold: 0.7\n  optimize_scheduling: true\n</code></pre>"},{"location":"configuration/#script-configuration","title":"Script Configuration","text":""},{"location":"configuration/#script-properties","title":"Script Properties","text":"Property Required Description <code>name</code> Yes Unique script identifier <code>command</code> Yes Bash command to execute <code>interval</code> No Execution interval in seconds <code>enabled</code> No Whether script is enabled (default: true) <code>description</code> No Human-readable description"},{"location":"configuration/#example_3","title":"Example","text":"<pre><code>scripts:\n  - name: \"health_check\"\n    command: \"curl -s -o /dev/null -w '%{http_code}' https://httpbin.org/status/200\"\n    interval: 30\n    enabled: true\n    description: \"HTTP health check\"\n\n  - name: \"disk_usage\"\n    command: \"df -h / | awk 'NR==2 {print \\$5}' | sed 's/%//'\"\n    interval: 300\n    enabled: true\n    description: \"Monitor disk usage\"\n\n  - name: \"maintenance\"\n    command: \"systemctl restart nginx\"\n    interval: 3600\n    enabled: false\n    description: \"Hourly Nginx restart\"\n</code></pre>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":""},{"location":"configuration/#configuration-override","title":"Configuration Override","text":"Variable Description <code>BAMON_CONFIG_FILE</code> Override default configuration file path <code>BAMON_VERBOSE</code> Enable verbose logging (true/false) <code>BAMON_LOG_FILE</code> Override default log file path"},{"location":"configuration/#example_4","title":"Example","text":"<pre><code># Use custom configuration file\nexport BAMON_CONFIG_FILE=\"/path/to/custom/config.yaml\"\nbamon status\n\n# Enable verbose logging\nexport BAMON_VERBOSE=true\nbamon start --daemon\n</code></pre>"},{"location":"configuration/#configuration-management","title":"Configuration Management","text":""},{"location":"configuration/#view-configuration","title":"View Configuration","text":"<pre><code># Show current configuration\nbamon config show\n\n# Pretty print configuration\nbamon config show --pretty\n</code></pre>"},{"location":"configuration/#edit-configuration","title":"Edit Configuration","text":"<pre><code># Edit configuration file\nbamon config edit\n\n# Edit with specific editor\nbamon config edit --editor nano\n</code></pre>"},{"location":"configuration/#validate-configuration","title":"Validate Configuration","text":"<pre><code># Validate configuration syntax\nbamon config validate\n\n# Validate with verbose output\nbamon config validate --verbose\n</code></pre>"},{"location":"configuration/#reset-configuration","title":"Reset Configuration","text":"<pre><code># Reset to default values (creates backup)\nbamon config reset\n\n# Reset without confirmation\nbamon config reset --force\n</code></pre>"},{"location":"configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"configuration/#custom-logging","title":"Custom Logging","text":"<pre><code>daemon:\n  log_file: \"/var/log/bamon/custom.log\"\n  log_level: \"INFO\"\n</code></pre>"},{"location":"configuration/#resource-limits","title":"Resource Limits","text":"<pre><code>sandbox:\n  timeout: 120\n  max_cpu_time: 300\n  max_file_size: 51200\n  max_virtual_memory: 512000\n</code></pre>"},{"location":"configuration/#performance-tuning","title":"Performance Tuning","text":"<pre><code>performance:\n  enable_monitoring: true\n  load_threshold: 0.6\n  optimize_scheduling: true\n  max_concurrent: 20\n</code></pre>"},{"location":"configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"configuration/#development-environment","title":"Development Environment","text":"<pre><code>daemon:\n  default_interval: 10\n  log_file: \"~/dev/bamon.log\"\n  max_concurrent: 5\n\nsandbox:\n  timeout: 60\n  max_cpu_time: 120\n\nscripts:\n  - name: \"test_script\"\n    command: \"echo 'Hello World'\"\n    interval: 10\n    enabled: true\n</code></pre>"},{"location":"configuration/#production-environment","title":"Production Environment","text":"<pre><code>daemon:\n  default_interval: 60\n  log_file: \"/var/log/bamon/bamon.log\"\n  pid_file: \"/var/run/bamon.pid\"\n  max_concurrent: 10\n\nsandbox:\n  timeout: 30\n  max_cpu_time: 60\n  max_file_size: 10240\n  max_virtual_memory: 102400\n\nperformance:\n  enable_monitoring: true\n  load_threshold: 0.8\n  optimize_scheduling: true\n\nscripts:\n  - name: \"api_health\"\n    command: \"curl -s https://api.example.com/health\"\n    interval: 30\n    enabled: true\n    description: \"API health check\"\n</code></pre>"},{"location":"configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"configuration/#configuration-validation","title":"Configuration Validation","text":"<pre><code># Check configuration syntax\nbamon config validate\n\n# View current configuration\nbamon config show\n</code></pre>"},{"location":"configuration/#common-issues","title":"Common Issues","text":"<p>Invalid YAML syntax: Use a YAML validator <pre><code># Check YAML syntax\nyq eval . ~/.config/bamon/config.yaml\n</code></pre></p> <p>Permission denied: Check file permissions <pre><code># Check file permissions\nls -la ~/.config/bamon/config.yaml\nchmod 644 ~/.config/bamon/config.yaml\n</code></pre></p> <p>Configuration not loading: Check file location <pre><code># Verify configuration file exists\nls -la ~/.config/bamon/config.yaml\n</code></pre></p>"},{"location":"examples/","title":"Examples","text":"<p>Real-world examples and use cases for BAMON monitoring scripts.</p>"},{"location":"examples/#basic-monitoring-examples","title":"Basic Monitoring Examples","text":""},{"location":"examples/#http-health-checks","title":"HTTP Health Checks","text":"<pre><code># Simple HTTP status check\nbamon add api_health \\\n  --command \"curl -s -o /dev/null -w '%{http_code}' https://api.example.com/health\" \\\n  --interval 30 \\\n  --description \"Check API health every 30 seconds\"\n\n# HTTP response time monitoring\nbamon add response_time \\\n  --command \"curl -s -o /dev/null -w '%{time_total}' https://api.example.com/health\" \\\n  --interval 60 \\\n  --description \"Monitor API response time\"\n</code></pre>"},{"location":"examples/#system-resource-monitoring","title":"System Resource Monitoring","text":"<pre><code># Disk usage monitoring\nbamon add disk_usage \\\n  --command \"df -h / | awk 'NR==2 {print \\$5}' | sed 's/%//' | awk '{if(\\$1&gt;90) exit 1; else exit 0}'\" \\\n  --interval 300 \\\n  --description \"Alert if disk usage exceeds 90%\"\n\n# Memory usage check\nbamon add memory_check \\\n  --command \"free -m | awk '/^Mem:/ {print \\$3/\\$2 * 100.0}' | awk '{if(\\$1&gt;85) exit 1; else exit 0}'\" \\\n  --interval 120 \\\n  --description \"Alert if memory usage exceeds 85%\"\n\n# CPU load monitoring\nbamon add cpu_load \\\n  --command \"uptime | awk '{print \\$10}' | sed 's/,//' | awk '{if(\\$1&gt;2.0) exit 1; else exit 0}'\" \\\n  --interval 60 \\\n  --description \"Alert if CPU load exceeds 2.0\"\n</code></pre>"},{"location":"examples/#service-status-monitoring","title":"Service Status Monitoring","text":"<pre><code># Nginx status check\nbamon add nginx_status \\\n  --command \"systemctl is-active nginx\" \\\n  --interval 30 \\\n  --description \"Check if Nginx service is running\"\n\n# Database connection test\nbamon add db_health \\\n  --command \"mysql -u root -p'password' -e 'SELECT 1' &gt; /dev/null 2&gt;&amp;1\" \\\n  --interval 60 \\\n  --description \"Test database connectivity\"\n\n# Docker container health\nbamon add docker_health \\\n  --command \"docker ps --filter 'status=running' | grep -q 'web-app'\" \\\n  --interval 30 \\\n  --description \"Check if web-app container is running\"\n</code></pre>"},{"location":"examples/#advanced-monitoring-examples","title":"Advanced Monitoring Examples","text":""},{"location":"examples/#log-file-monitoring","title":"Log File Monitoring","text":"<pre><code># Check for error patterns in logs\nbamon add error_log_check \\\n  --command \"tail -n 100 /var/log/nginx/error.log | grep -c 'ERROR' | awk '{if(\\$1&gt;10) exit 1; else exit 0}'\" \\\n  --interval 300 \\\n  --description \"Alert if too many errors in Nginx logs\"\n\n# Application log monitoring\nbamon add app_log_check \\\n  --command \"tail -n 50 /var/log/app/application.log | grep -c 'CRITICAL' | awk '{if(\\$1&gt;0) exit 1; else exit 0}'\" \\\n  --interval 120 \\\n  --description \"Alert on critical application errors\"\n</code></pre>"},{"location":"examples/#network-connectivity","title":"Network Connectivity","text":"<pre><code># Internet connectivity test\nbamon add internet_check \\\n  --command \"ping -c 1 8.8.8.8 &gt; /dev/null 2&gt;&amp;1\" \\\n  --interval 60 \\\n  --description \"Test internet connectivity\"\n\n# DNS resolution test\nbamon add dns_check \\\n  --command \"nslookup google.com &gt; /dev/null 2&gt;&amp;1\" \\\n  --interval 120 \\\n  --description \"Test DNS resolution\"\n\n# Port availability check\nbamon add port_check \\\n  --command \"nc -z localhost 80 &gt; /dev/null 2&gt;&amp;1\" \\\n  --interval 30 \\\n  --description \"Check if port 80 is open\"\n</code></pre>"},{"location":"examples/#file-system-monitoring","title":"File System Monitoring","text":"<pre><code># File existence check\nbamon add config_file_check \\\n  --command \"test -f /etc/nginx/nginx.conf\" \\\n  --interval 300 \\\n  --description \"Verify Nginx config file exists\"\n\n# Directory size monitoring\nbamon add log_size_check \\\n  --command \"du -sh /var/log | awk '{print \\$1}' | sed 's/G//' | awk '{if(\\$1&gt;5) exit 1; else exit 0}'\" \\\n  --interval 600 \\\n  --description \"Alert if log directory exceeds 5GB\"\n\n# File modification time check\nbamon add backup_check \\\n  --command \"find /backups -name '*.tar.gz' -mtime -1 | wc -l | awk '{if(\\$1&gt;0) exit 0; else exit 1}'\" \\\n  --interval 3600 \\\n  --description \"Verify daily backups are created\"\n</code></pre>"},{"location":"examples/#business-logic-examples","title":"Business Logic Examples","text":""},{"location":"examples/#e-commerce-monitoring","title":"E-commerce Monitoring","text":"<pre><code># Payment gateway health\nbamon add payment_health \\\n  --command \"curl -s https://api.stripe.com/v1/charges -H 'Authorization: Bearer sk_test_...' | grep -q 'object'\" \\\n  --interval 60 \\\n  --description \"Check payment gateway connectivity\"\n\n# Inventory check\nbamon add inventory_check \\\n  --command \"mysql -u root -p'password' -e 'SELECT COUNT(*) FROM products WHERE stock &lt; 10' | awk 'NR==2' | awk '{if(\\$1&gt;0) exit 1; else exit 0}'\" \\\n  --interval 300 \\\n  --description \"Alert if any products are low in stock\"\n</code></pre>"},{"location":"examples/#api-rate-limiting","title":"API Rate Limiting","text":"<pre><code># API rate limit monitoring\nbamon add rate_limit_check \\\n  --command \"curl -s -I https://api.example.com/endpoint | grep 'X-RateLimit-Remaining' | awk '{print \\$2}' | awk '{if(\\$1&lt;100) exit 1; else exit 0}'\" \\\n  --interval 120 \\\n  --description \"Alert if API rate limit is low\"\n</code></pre>"},{"location":"examples/#security-monitoring","title":"Security Monitoring","text":"<pre><code># Failed login attempts\nbamon add failed_logins \\\n  --command \"grep 'Failed password' /var/log/auth.log | tail -n 10 | wc -l | awk '{if(\\$1&gt;5) exit 1; else exit 0}'\" \\\n  --interval 300 \\\n  --description \"Alert on multiple failed login attempts\"\n\n# SSL certificate expiry\nbamon add ssl_expiry \\\n  --command \"echo | openssl s_client -servername example.com -connect example.com:443 2&gt;/dev/null | openssl x509 -noout -dates | grep 'notAfter' | cut -d= -f2 | xargs -I {} date -d {} +%s | awk '{if(\\$1-$(date +%s)&lt;604800) exit 1; else exit 0}'\" \\\n  --interval 86400 \\\n  --description \"Alert if SSL certificate expires within 7 days\"\n</code></pre>"},{"location":"examples/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"examples/#application-performance","title":"Application Performance","text":"<pre><code># Response time monitoring\nbamon add response_time \\\n  --command \"curl -s -o /dev/null -w '%{time_total}' https://app.example.com/api/health | awk '{if(\\$1&gt;2.0) exit 1; else exit 0}'\" \\\n  --interval 30 \\\n  --description \"Alert if API response time exceeds 2 seconds\"\n\n# Database query performance\nbamon add db_performance \\\n  --command \"mysql -u root -p'password' -e 'SHOW PROCESSLIST' | grep -c 'Query' | awk '{if(\\$1&gt;50) exit 1; else exit 0}'\" \\\n  --interval 60 \\\n  --description \"Alert if too many database queries are running\"\n</code></pre>"},{"location":"examples/#system-performance","title":"System Performance","text":"<pre><code># Load average monitoring\nbamon add load_average \\\n  --command \"uptime | awk '{print \\$10}' | sed 's/,//' | awk '{if(\\$1&gt;4.0) exit 1; else exit 0}'\" \\\n  --interval 60 \\\n  --description \"Alert if system load exceeds 4.0\"\n\n# Disk I/O monitoring\nbamon add disk_io \\\n  --command \"iostat -x 1 1 | grep 'sda' | awk '{print \\$10}' | awk '{if(\\$1&gt;80) exit 1; else exit 0}'\" \\\n  --interval 120 \\\n  --description \"Alert if disk I/O wait exceeds 80%\"\n</code></pre>"},{"location":"examples/#integration-examples","title":"Integration Examples","text":""},{"location":"examples/#slack-notifications","title":"Slack Notifications","text":"<pre><code># Send Slack notification on failure\nbamon add slack_alert \\\n  --command \"curl -X POST -H 'Content-type: application/json' --data '{\\\"text\\\":\\\"System alert: Service is down\\\"}' https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\" \\\n  --interval 300 \\\n  --description \"Send Slack alert every 5 minutes if triggered\"\n</code></pre>"},{"location":"examples/#email-alerts","title":"Email Alerts","text":"<pre><code># Send email notification\nbamon add email_alert \\\n  --command \"echo 'System alert: Service is down' | mail -s 'BAMON Alert' admin@example.com\" \\\n  --interval 600 \\\n  --description \"Send email alert every 10 minutes if triggered\"\n</code></pre>"},{"location":"examples/#webhook-integration","title":"Webhook Integration","text":"<pre><code># Send webhook notification\nbamon add webhook_alert \\\n  --command \"curl -X POST -H 'Content-Type: application/json' -d '{\\\"status\\\":\\\"down\\\",\\\"service\\\":\\\"api\\\"}' https://monitoring.example.com/webhook\" \\\n  --interval 300 \\\n  --description \"Send webhook alert on service failure\"\n</code></pre>"},{"location":"examples/#best-practices","title":"Best Practices","text":""},{"location":"examples/#script-design","title":"Script Design","text":"<ol> <li>Use descriptive names: <code>api_health_check</code> instead of <code>check1</code></li> <li>Include meaningful descriptions: Help others understand the script's purpose</li> <li>Test commands manually: Verify they work before adding to BAMON</li> <li>Use appropriate intervals: Balance monitoring frequency with system load</li> <li>Handle errors gracefully: Scripts should exit with appropriate codes</li> </ol>"},{"location":"examples/#error-handling","title":"Error Handling","text":"<pre><code># Good: Explicit error handling\nbamon add good_script \\\n  --command \"curl -s https://api.example.com/health || exit 1\" \\\n  --interval 30\n\n# Bad: No error handling\nbamon add bad_script \\\n  --command \"curl -s https://api.example.com/health\" \\\n  --interval 30\n</code></pre>"},{"location":"examples/#resource-management","title":"Resource Management","text":"<pre><code># Use timeouts for long-running commands\nbamon add timeout_script \\\n  --command \"timeout 30 curl -s https://slow-api.example.com/health\" \\\n  --interval 60\n\n# Limit resource usage\nbamon add resource_script \\\n  --command \"nice -n 19 curl -s https://api.example.com/health\" \\\n  --interval 30\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>BAMON can be installed in several ways depending on your needs and environment.</p>"},{"location":"installation/#quick-install-recommended","title":"Quick Install (Recommended)","text":"<p>The easiest way to install BAMON is using our installation script:</p> <pre><code># Download and install from latest release\ncurl -sSL https://github.com/WawRepo/bamon/releases/latest/download/install-repo.sh | bash\n</code></pre> <p>This will: - Download the latest BAMON binary - Install to <code>~/.local/bin</code> (user installation) - Set up default configuration and sample scripts - Add BAMON to your PATH</p>"},{"location":"installation/#installation-options","title":"Installation Options","text":""},{"location":"installation/#user-installation-default","title":"User Installation (Default)","text":"<pre><code># Install to user directory\ncurl -sSL https://github.com/WawRepo/bamon/releases/latest/download/install-repo.sh | bash\n</code></pre> <p>Installation location: <code>~/.local/bin/bamon</code> Configuration: <code>~/.config/bamon/config.yaml</code> Logs: <code>~/.local/share/bamon/logs/bamon.log</code></p>"},{"location":"installation/#system-installation","title":"System Installation","text":"<pre><code># Install system-wide (requires sudo)\ncurl -sSL https://github.com/WawRepo/bamon/releases/latest/download/install-repo.sh | bash -s -- --system\n</code></pre> <p>Installation location: <code>/usr/local/bin/bamon</code> Configuration: <code>/etc/bamon/config.yaml</code> Logs: <code>/var/log/bamon/bamon.log</code></p>"},{"location":"installation/#custom-installation","title":"Custom Installation","text":"<pre><code># Install to custom directory\ncurl -sSL https://github.com/WawRepo/bamon/releases/latest/download/install-repo.sh | bash -s -- --prefix=/opt/bamon\n</code></pre>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":""},{"location":"installation/#required-dependencies","title":"Required Dependencies","text":"<p>BAMON requires the following tools to be installed:</p> <ul> <li>bash 4.2+ (for script execution)</li> <li>curl (for health checks and downloads)</li> <li>yq (for YAML configuration processing)</li> <li>timeout (for script execution timeouts)</li> </ul>"},{"location":"installation/#installing-dependencies","title":"Installing Dependencies","text":""},{"location":"installation/#macos-using-homebrew","title":"macOS (using Homebrew)","text":"<pre><code>brew install bash curl yq coreutils\n</code></pre>"},{"location":"installation/#ubuntudebian","title":"Ubuntu/Debian","text":"<pre><code>sudo apt update\nsudo apt install curl yq coreutils\n</code></pre>"},{"location":"installation/#rhelcentosfedora","title":"RHEL/CentOS/Fedora","text":"<pre><code>sudo yum install curl yq coreutils\n# or for newer versions:\nsudo dnf install curl yq coreutils\n</code></pre>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>If you prefer to install manually:</p>"},{"location":"installation/#1-download-binary","title":"1. Download Binary","text":"<pre><code># Download latest release\nwget https://github.com/WawRepo/bamon/releases/latest/download/bamon\nchmod +x bamon\n</code></pre>"},{"location":"installation/#2-install-binary","title":"2. Install Binary","text":"<pre><code># User installation\nmkdir -p ~/.local/bin\nmv bamon ~/.local/bin/\necho 'export PATH=\"$HOME/.local/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# System installation\nsudo mv bamon /usr/local/bin/\n</code></pre>"},{"location":"installation/#3-create-configuration","title":"3. Create Configuration","text":"<pre><code># User configuration\nmkdir -p ~/.config/bamon\ncat &gt; ~/.config/bamon/config.yaml &lt;&lt; 'EOF'\ndaemon:\n  default_interval: 60\n  log_file: \"~/.local/share/bamon/logs/bamon.log\"\n  pid_file: \"~/.local/share/bamon/bamon.pid\"\n  max_concurrent: 10\n\nsandbox:\n  timeout: 30\n  max_cpu_time: 60\n  max_file_size: 10240\n  max_virtual_memory: 102400\n\nperformance:\n  enable_monitoring: true\n  load_threshold: 0.8\n  optimize_scheduling: true\n\nscripts: []\nEOF\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>For development and testing:</p> <pre><code># Clone repository\ngit clone https://github.com/WawRepo/bamon.git\ncd bamon\n\n# Install development dependencies\nbrew install bashly yq  # macOS\n# or\nsudo apt install bashly yq  # Ubuntu\n\n# Generate binary\nbashly generate\n\n# Test installation\n./bamon --version\n</code></pre>"},{"location":"installation/#verification","title":"Verification","text":"<p>After installation, verify BAMON is working:</p> <pre><code># Check version\nbamon --version\n\n# Check configuration\nbamon config show\n\n# Test basic functionality\nbamon status\n</code></pre>"},{"location":"installation/#shell-completions","title":"Shell Completions","text":"<p>Enable auto-completion for better command experience:</p> <pre><code># Enable for current session\neval \"$(bamon completions)\"\n\n# Make permanent (add to your shell config)\necho 'eval \"$(bamon completions)\"' &gt;&gt; ~/.bashrc  # Bash\necho 'eval \"$(bamon completions)\"' &gt;&gt; ~/.zshrc   # Zsh\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":"<p>Command not found: Ensure BAMON is in your PATH <pre><code>echo $PATH | grep -q \"$HOME/.local/bin\" || export PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre></p> <p>Permission denied: Check file permissions <pre><code>ls -la ~/.local/bin/bamon\nchmod +x ~/.local/bin/bamon\n</code></pre></p> <p>Missing dependencies: Install required tools <pre><code># Check for required tools\ncommand -v curl yq timeout bash\n</code></pre></p>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the Troubleshooting Guide</li> <li>Review the Configuration Guide</li> <li>Open an issue on GitHub</li> </ol>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions for BAMON.</p>"},{"location":"troubleshooting/#common-issues","title":"Common Issues","text":""},{"location":"troubleshooting/#daemon-issues","title":"Daemon Issues","text":""},{"location":"troubleshooting/#daemon-fails-to-start","title":"Daemon Fails to Start","text":"<p>Symptoms: - <code>bamon start</code> returns error - Daemon process not running - Configuration errors</p> <p>Solutions:</p> <ol> <li> <p>Check if another instance is running: <pre><code>bamon status\nps aux | grep bamon\n</code></pre></p> </li> <li> <p>Verify permissions on configuration directory: <pre><code>ls -la ~/.config/bamon/\nchmod 755 ~/.config/bamon/\nchmod 644 ~/.config/bamon/config.yaml\n</code></pre></p> </li> <li> <p>Check logs for specific errors: <pre><code>tail -f ~/.local/share/bamon/logs/bamon.log\n</code></pre></p> </li> <li> <p>Validate configuration: <pre><code>bamon config validate\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#daemon-already-running","title":"Daemon Already Running","text":"<p>Symptoms: - \"Daemon already running\" error - Cannot start new daemon instance</p> <p>Solutions:</p> <ol> <li> <p>Stop existing daemon: <pre><code>bamon stop\n</code></pre></p> </li> <li> <p>Force stop if needed: <pre><code>bamon stop --force\n</code></pre></p> </li> <li> <p>Kill process manually: <pre><code>pkill -f bamon\nrm -f ~/.local/share/bamon/bamon.pid\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#script-execution-issues","title":"Script Execution Issues","text":""},{"location":"troubleshooting/#scripts-not-executing","title":"Scripts Not Executing","text":"<p>Symptoms: - Scripts show as \"never\" status - No execution history - Daemon running but scripts not triggered</p> <p>Solutions:</p> <ol> <li> <p>Verify script is enabled: <pre><code>bamon list\nbamon list --enabled-only\n</code></pre></p> </li> <li> <p>Check script syntax: <pre><code>bash -n your_script.sh\n</code></pre></p> </li> <li> <p>Test script manually: <pre><code>bamon now --name script_name\n</code></pre></p> </li> <li> <p>Review execution logs: <pre><code>bamon status --verbose\ntail -f ~/.local/share/bamon/logs/bamon.log\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#script-execution-failures","title":"Script Execution Failures","text":"<p>Symptoms: - Scripts show as \"failed\" status - Error messages in logs - Scripts exit with non-zero code</p> <p>Solutions:</p> <ol> <li> <p>Check script output: <pre><code>bamon status --verbose --name script_name\n</code></pre></p> </li> <li> <p>Test script manually: <pre><code># Run the exact command from configuration\ncurl -s https://api.example.com/health\n</code></pre></p> </li> <li> <p>Check dependencies: <pre><code># Verify required tools are available\nwhich curl\nwhich jq\nwhich yq\n</code></pre></p> </li> <li> <p>Review sandbox limits: <pre><code>bamon config show | grep -A 10 sandbox\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"troubleshooting/#configuration-errors","title":"Configuration Errors","text":"<p>Symptoms: - \"Invalid configuration file\" error - YAML syntax errors - Configuration not loading</p> <p>Solutions:</p> <ol> <li> <p>Validate configuration: <pre><code>bamon config validate\n</code></pre></p> </li> <li> <p>Check YAML syntax: <pre><code>yq eval . ~/.config/bamon/config.yaml\n</code></pre></p> </li> <li> <p>Reset to defaults: <pre><code>bamon config reset\n</code></pre></p> </li> <li> <p>Edit configuration: <pre><code>bamon config edit\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#configuration-not-loading","title":"Configuration Not Loading","text":"<p>Symptoms: - Default configuration used instead of custom - Configuration changes not applied - Wrong configuration file location</p> <p>Solutions:</p> <ol> <li> <p>Check configuration file location: <pre><code>bamon config show\n</code></pre></p> </li> <li> <p>Use custom configuration file: <pre><code>bamon --config /path/to/config.yaml status\n</code></pre></p> </li> <li> <p>Set environment variable: <pre><code>export BAMON_CONFIG_FILE=\"/path/to/config.yaml\"\nbamon status\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#high-system-load","title":"High System Load","text":"<p>Symptoms: - System becomes slow - High CPU usage - Scripts timing out</p> <p>Solutions:</p> <ol> <li> <p>Check system performance: <pre><code>bamon performance\n</code></pre></p> </li> <li> <p>Reduce concurrent executions: <pre><code># Edit configuration\nbamon config edit\n# Set max_concurrent to lower value\n</code></pre></p> </li> <li> <p>Increase script intervals: <pre><code>bamon add script_name --command \"...\" --interval 300\n</code></pre></p> </li> <li> <p>Disable performance monitoring: <pre><code># Edit configuration\nbamon config edit\n# Set enable_monitoring: false\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#memory-issues","title":"Memory Issues","text":"<p>Symptoms: - High memory usage - Scripts killed due to memory limits - System running out of memory</p> <p>Solutions:</p> <ol> <li> <p>Check memory usage: <pre><code>free -h\nbamon performance\n</code></pre></p> </li> <li> <p>Adjust sandbox limits: <pre><code># Edit configuration\nbamon config edit\n# Increase max_virtual_memory\n</code></pre></p> </li> <li> <p>Reduce script complexity: <pre><code># Simplify scripts to use less memory\nbamon add simple_script --command \"echo 'test'\"\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#command-not-found","title":"Command Not Found","text":"<p>Symptoms: - <code>bamon: command not found</code> - Binary not in PATH - Installation incomplete</p> <p>Solutions:</p> <ol> <li> <p>Check if binary exists: <pre><code>ls -la ~/.local/bin/bamon\nls -la /usr/local/bin/bamon\n</code></pre></p> </li> <li> <p>Add to PATH: <pre><code>echo 'export PATH=\"$HOME/.local/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></p> </li> <li> <p>Reinstall BAMON: <pre><code>curl -sSL https://github.com/WawRepo/bamon/releases/latest/download/install-repo.sh | bash\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#permission-denied","title":"Permission Denied","text":"<p>Symptoms: - \"Permission denied\" errors - Cannot execute binary - Cannot write to directories</p> <p>Solutions:</p> <ol> <li> <p>Check file permissions: <pre><code>ls -la ~/.local/bin/bamon\nchmod +x ~/.local/bin/bamon\n</code></pre></p> </li> <li> <p>Check directory permissions: <pre><code>ls -la ~/.config/bamon/\nchmod 755 ~/.config/bamon/\n</code></pre></p> </li> <li> <p>Run with sudo (system install): <pre><code>sudo bamon status\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#dependency-issues","title":"Dependency Issues","text":""},{"location":"troubleshooting/#missing-dependencies","title":"Missing Dependencies","text":"<p>Symptoms: - \"Command not found\" for required tools - Scripts failing due to missing tools - Installation errors</p> <p>Solutions:</p> <ol> <li> <p>Install required dependencies: <pre><code># macOS\nbrew install curl yq coreutils\n\n# Ubuntu/Debian\nsudo apt install curl yq coreutils\n\n# RHEL/CentOS\nsudo yum install curl yq coreutils\n</code></pre></p> </li> <li> <p>Check for required tools: <pre><code>command -v curl yq timeout bash\n</code></pre></p> </li> <li> <p>Update PATH: <pre><code># Add tools to PATH if installed in non-standard location\nexport PATH=\"/usr/local/bin:$PATH\"\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#debug-mode","title":"Debug Mode","text":""},{"location":"troubleshooting/#enable-verbose-logging","title":"Enable Verbose Logging","text":"<pre><code># Set environment variable\nexport BAMON_VERBOSE=true\n\n# Start daemon with verbose logging\nbamon start --daemon\n\n# Check logs\ntail -f ~/.local/share/bamon/logs/bamon.log\n</code></pre>"},{"location":"troubleshooting/#debug-script-execution","title":"Debug Script Execution","text":"<pre><code># Test script manually\nbamon now --name script_name\n\n# Check detailed status\nbamon status --verbose --name script_name\n\n# Review execution history\nbamon status --json | jq '.scripts[] | select(.name==\"script_name\")'\n</code></pre>"},{"location":"troubleshooting/#debug-configuration","title":"Debug Configuration","text":"<pre><code># Validate configuration\nbamon config validate --verbose\n\n# Show current configuration\nbamon config show --pretty\n\n# Test configuration loading\nbamon --config /path/to/config.yaml status\n</code></pre>"},{"location":"troubleshooting/#log-analysis","title":"Log Analysis","text":""},{"location":"troubleshooting/#log-file-locations","title":"Log File Locations","text":"<ul> <li>User installation: <code>~/.local/share/bamon/logs/bamon.log</code></li> <li>System installation: <code>/var/log/bamon/bamon.log</code></li> <li>Custom location: As configured in <code>config.yaml</code></li> </ul>"},{"location":"troubleshooting/#log-analysis-commands","title":"Log Analysis Commands","text":"<pre><code># View recent logs\ntail -f ~/.local/share/bamon/logs/bamon.log\n\n# Search for errors\ngrep -i error ~/.local/share/bamon/logs/bamon.log\n\n# Search for specific script\ngrep \"script_name\" ~/.local/share/bamon/logs/bamon.log\n\n# Count script executions\ngrep \"Executing script\" ~/.local/share/bamon/logs/bamon.log | wc -l\n</code></pre>"},{"location":"troubleshooting/#common-log-patterns","title":"Common Log Patterns","text":"<pre><code># Script execution success\n[2024-01-15 10:30:15] [health_check] Script executed successfully\n\n# Script execution failure\n[2024-01-15 10:30:15] [health_check] Script execution failed: exit code 1\n\n# Daemon startup\n[2024-01-15 10:30:00] [bamon] Daemon started successfully\n\n# Configuration error\n[2024-01-15 10:30:00] [bamon] Configuration validation failed: invalid YAML syntax\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"troubleshooting/#self-diagnosis","title":"Self-Diagnosis","text":"<ol> <li> <p>Check system status: <pre><code>bamon status\nbamon performance\n</code></pre></p> </li> <li> <p>Validate configuration: <pre><code>bamon config validate\n</code></pre></p> </li> <li> <p>Review logs: <pre><code>tail -f ~/.local/share/bamon/logs/bamon.log\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#reporting-issues","title":"Reporting Issues","text":"<p>When reporting issues, include:</p> <ol> <li> <p>BAMON version: <pre><code>bamon --version\n</code></pre></p> </li> <li> <p>System information: <pre><code>uname -a\n</code></pre></p> </li> <li> <p>Configuration: <pre><code>bamon config show\n</code></pre></p> </li> <li> <p>Error logs: <pre><code>tail -f ~/.local/share/bamon/logs/bamon.log\n</code></pre></p> </li> <li> <p>Steps to reproduce</p> </li> </ol>"},{"location":"troubleshooting/#community-support","title":"Community Support","text":"<ul> <li>GitHub Issues: https://github.com/WawRepo/bamon/issues</li> <li>Documentation: https://wawrepo.github.io/bamon/</li> <li>Discussions: https://github.com/WawRepo/bamon/discussions</li> </ul>"},{"location":"uninstallation/","title":"Uninstallation","text":"<p>Removing BAMON is straightforward and can be done in a few simple steps.</p>"},{"location":"uninstallation/#quick-uninstall","title":"Quick Uninstall","text":""},{"location":"uninstallation/#user-installation","title":"User Installation","text":"<pre><code># Remove binary\nrm ~/.local/bin/bamon\n\n# Remove configuration (optional)\nrm -rf ~/.config/bamon\n\n# Remove logs (optional)\nrm -rf ~/.local/share/bamon\n\n# Remove from PATH (if manually added)\n# Edit ~/.bashrc, ~/.zshrc, etc. and remove the BAMON path\n</code></pre>"},{"location":"uninstallation/#system-installation","title":"System Installation","text":"<pre><code># Remove binary\nsudo rm /usr/local/bin/bamon\n\n# Remove configuration (optional)\nsudo rm -rf /etc/bamon\n\n# Remove logs (optional)\nsudo rm -rf /var/log/bamon\n</code></pre>"},{"location":"uninstallation/#complete-removal","title":"Complete Removal","text":"<p>To completely remove BAMON and all associated files:</p>"},{"location":"uninstallation/#1-stop-bamon-daemon","title":"1. Stop BAMON Daemon","text":"<pre><code># Stop any running daemon\nbamon stop\n\n# Force stop if needed\nbamon stop --force\n</code></pre>"},{"location":"uninstallation/#2-remove-binary","title":"2. Remove Binary","text":"<pre><code># Find BAMON binary location\nwhich bamon\n\n# Remove binary\nrm $(which bamon)\n</code></pre>"},{"location":"uninstallation/#3-remove-configuration-files","title":"3. Remove Configuration Files","text":"<pre><code># Remove user configuration\nrm -rf ~/.config/bamon\n\n# Remove system configuration (if system install)\nsudo rm -rf /etc/bamon\n</code></pre>"},{"location":"uninstallation/#4-remove-log-files","title":"4. Remove Log Files","text":"<pre><code># Remove user logs\nrm -rf ~/.local/share/bamon\n\n# Remove system logs (if system install)\nsudo rm -rf /var/log/bamon\n</code></pre>"},{"location":"uninstallation/#5-remove-from-path","title":"5. Remove from PATH","text":"<p>Edit your shell configuration files and remove BAMON-related PATH entries:</p> <pre><code># Edit shell config files\nnano ~/.bashrc    # For Bash\nnano ~/.zshrc     # For Zsh\nnano ~/.fish/config.fish  # For Fish\n\n# Remove or comment out lines like:\n# export PATH=\"$HOME/.local/bin:$PATH\"\n# eval \"$(bamon completions)\"\n</code></pre>"},{"location":"uninstallation/#6-remove-shell-completions","title":"6. Remove Shell Completions","text":"<pre><code># Remove completion setup from shell config\n# Edit ~/.bashrc, ~/.zshrc, etc. and remove:\n# eval \"$(bamon completions)\"\n</code></pre>"},{"location":"uninstallation/#verification","title":"Verification","text":"<p>After uninstallation, verify BAMON is completely removed:</p> <pre><code># Check if binary exists\nwhich bamon\n# Should return: bamon not found\n\n# Check if configuration exists\nls ~/.config/bamon\n# Should return: No such file or directory\n\n# Check if logs exist\nls ~/.local/share/bamon\n# Should return: No such file or directory\n</code></pre>"},{"location":"uninstallation/#cleanup-script","title":"Cleanup Script","text":"<p>For automated cleanup, you can use this script:</p> <pre><code>#!/bin/bash\n# BAMON cleanup script\n\necho \"Stopping BAMON daemon...\"\nbamon stop 2&gt;/dev/null || true\n\necho \"Removing BAMON binary...\"\nrm -f ~/.local/bin/bamon\nrm -f /usr/local/bin/bamon\n\necho \"Removing configuration...\"\nrm -rf ~/.config/bamon\nrm -rf /etc/bamon\n\necho \"Removing logs...\"\nrm -rf ~/.local/share/bamon\nrm -rf /var/log/bamon\n\necho \"BAMON has been completely removed.\"\n</code></pre>"},{"location":"uninstallation/#reinstallation","title":"Reinstallation","text":"<p>If you want to reinstall BAMON after removal:</p> <pre><code># Reinstall using the same method as before\ncurl -sSL https://github.com/WawRepo/bamon/releases/latest/download/install-repo.sh | bash\n</code></pre>"},{"location":"uninstallation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"uninstallation/#common-issues","title":"Common Issues","text":"<p>\"bamon: command not found\": This is expected after uninstallation.</p> <p>Configuration still exists: Manually remove configuration directories: <pre><code>rm -rf ~/.config/bamon\n</code></pre></p> <p>Logs still exist: Manually remove log directories: <pre><code>rm -rf ~/.local/share/bamon\n</code></pre></p> <p>PATH still contains BAMON: Edit your shell configuration files to remove BAMON paths.</p>"},{"location":"uninstallation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues during uninstallation:</p> <ol> <li>Check the Troubleshooting Guide</li> <li>Open an issue on GitHub</li> </ol>"},{"location":"commands/","title":"Commands Overview","text":"<p>BAMON provides a comprehensive CLI interface for managing monitored scripts. All commands follow a consistent pattern and provide helpful output.</p>"},{"location":"commands/#command-structure","title":"Command Structure","text":"<pre><code>bamon &lt;command&gt; [options] [arguments]\n</code></pre>"},{"location":"commands/#available-commands","title":"Available Commands","text":""},{"location":"commands/#core-commands","title":"Core Commands","text":"Command Description Usage <code>status</code> Display current status of all configured scripts <code>bamon status [options]</code> <code>add</code> Add a new script to monitor <code>bamon add &lt;name&gt; [options]</code> <code>remove</code> Remove a script from monitoring <code>bamon remove &lt;name&gt; [options]</code> <code>list</code> List all configured scripts <code>bamon list [options]</code> <code>now</code> Execute all enabled scripts immediately <code>bamon now [options]</code>"},{"location":"commands/#daemon-commands","title":"Daemon Commands","text":"Command Description Usage <code>start</code> Start the daemon process <code>bamon start [options]</code> <code>stop</code> Stop the daemon process <code>bamon stop [options]</code> <code>restart</code> Restart the daemon process <code>bamon restart [options]</code>"},{"location":"commands/#utility-commands","title":"Utility Commands","text":"Command Description Usage <code>performance</code> Show system performance metrics <code>bamon performance [options]</code> <code>config</code> Configuration management <code>bamon config &lt;subcommand&gt; [options]</code>"},{"location":"commands/#global-options","title":"Global Options","text":"<p>All commands support these global options:</p> Option Short Description <code>--help</code> <code>-h</code> Show help message for the command <code>--version</code> <code>-v</code> Show version information <code>--config</code> <code>-c</code> Specify custom configuration file path"},{"location":"commands/#getting-help","title":"Getting Help","text":""},{"location":"commands/#command-help","title":"Command Help","text":"<pre><code># Show help for a specific command\nbamon &lt;command&gt; --help\n\n# Examples\nbamon status --help\nbamon add --help\nbamon start --help\n</code></pre>"},{"location":"commands/#global-help","title":"Global Help","text":"<pre><code># Show all available commands\nbamon --help\n\n# Show version information\nbamon --version\n</code></pre>"},{"location":"commands/#command-examples","title":"Command Examples","text":""},{"location":"commands/#basic-workflow","title":"Basic Workflow","text":"<pre><code># Start the daemon\nbamon start --daemon\n\n# Add a monitoring script\nbamon add health_check --command \"curl -s https://httpbin.org/status/200\" --interval 30\n\n# Check status\nbamon status\n\n# Execute all scripts immediately\nbamon now\n\n# Stop the daemon\nbamon stop\n</code></pre>"},{"location":"commands/#configuration-management","title":"Configuration Management","text":"<pre><code># View current configuration\nbamon config show\n\n# Edit configuration\nbamon config edit\n\n# Validate configuration\nbamon config validate\n\n# Reset to defaults\nbamon config reset\n</code></pre>"},{"location":"commands/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Show performance metrics\nbamon performance\n\n# Show detailed performance info\nbamon performance --verbose\n\n# Get JSON output\nbamon performance --json\n</code></pre>"},{"location":"commands/#command-reference","title":"Command Reference","text":"<p>For detailed information about each command, see the individual command pages:</p> <ul> <li>status - Status monitoring and reporting</li> <li>add - Adding monitoring scripts</li> <li>remove - Removing monitoring scripts</li> <li>list - Listing configured scripts</li> <li>now - Manual script execution</li> <li>start - Starting the daemon</li> <li>stop - Stopping the daemon</li> <li>restart - Restarting the daemon</li> <li>performance - Performance monitoring</li> <li>config - Configuration management</li> </ul>"},{"location":"commands/#best-practices","title":"Best Practices","text":""},{"location":"commands/#command-usage","title":"Command Usage","text":"<ol> <li>Always check status before making changes</li> <li>Use descriptive names for scripts</li> <li>Test scripts manually before adding them</li> <li>Monitor performance regularly</li> <li>Keep configuration backed up</li> </ol>"},{"location":"commands/#error-handling","title":"Error Handling","text":"<pre><code># Check for errors\nbamon status --failed-only\n\n# View detailed status\nbamon status --verbose\n\n# Check configuration\nbamon config validate\n</code></pre>"},{"location":"commands/#automation","title":"Automation","text":"<pre><code># Use in scripts\nif bamon status --json | jq -e '.scripts[] | select(.name==\"health_check\" and .status==\"failed\")'; then\n    echo \"Health check failed!\"\n    exit 1\nfi\n</code></pre>"},{"location":"commands/add/","title":"add Command","text":"<p>Add a new script to monitor with specified command and interval.</p>"},{"location":"commands/add/#syntax","title":"Syntax","text":"<pre><code>bamon add &lt;name&gt; [options]\n</code></pre>"},{"location":"commands/add/#arguments","title":"Arguments","text":"Argument Required Description <code>name</code> Yes Script name/ID (must be unique)"},{"location":"commands/add/#options","title":"Options","text":"Option Short Argument Required Description <code>--command</code> <code>-c</code> command Yes Bash command/code to execute <code>--interval</code> <code>-i</code> seconds No Execution interval in seconds (default: 60) <code>--description</code> <code>-d</code> text No Description of what the script does <code>--enabled</code> No Set script as enabled (default) <code>--disabled</code> No Set script as disabled"},{"location":"commands/add/#examples","title":"Examples","text":""},{"location":"commands/add/#basic-script-addition","title":"Basic Script Addition","text":"<pre><code># Add a simple health check script\nbamon add health_check --command \"curl -s -o /dev/null -w '%{http_code}' https://httpbin.org/status/200\"\n</code></pre> <p>Output: <pre><code>Script 'health_check' added successfully\nCommand: curl -s -o /dev/null -w '%{http_code}' https://httpbin.org/status/200\nInterval: 60s (default)\nStatus: enabled\n</code></pre></p>"},{"location":"commands/add/#custom-interval","title":"Custom Interval","text":"<pre><code># Add a disk usage monitor with custom interval\nbamon add disk_check \\\n  --command \"df -h / | awk 'NR==2 {print \\$5}' | sed 's/%//'\" \\\n  --interval 300 \\\n  --description \"Check disk usage every 5 minutes\"\n</code></pre> <p>Output: <pre><code>Script 'disk_check' added successfully\nCommand: df -h / | awk 'NR==2 {print $5}' | sed 's/%//'\nInterval: 300s\nDescription: Check disk usage every 5 minutes\nStatus: enabled\n</code></pre></p>"},{"location":"commands/add/#disabled-script","title":"Disabled Script","text":"<pre><code># Add a script that's initially disabled\nbamon add maintenance_script \\\n  --command \"systemctl restart nginx\" \\\n  --interval 3600 \\\n  --description \"Restart Nginx hourly\" \\\n  --disabled\n</code></pre> <p>Output: <pre><code>Script 'maintenance_script' added successfully\nCommand: systemctl restart nginx\nInterval: 3600s\nDescription: Restart Nginx hourly\nStatus: disabled\n</code></pre></p>"},{"location":"commands/add/#complex-command","title":"Complex Command","text":"<pre><code># Add a script with complex command\nbamon add memory_check \\\n  --command \"free -m | awk '/^Mem:/ {print \\$3/\\$2 * 100.0}' | awk '{if(\\$1&gt;85) exit 1; else exit 0}'\" \\\n  --interval 120 \\\n  --description \"Alert if memory usage exceeds 85%\"\n</code></pre>"},{"location":"commands/add/#command-validation","title":"Command Validation","text":"<p>BAMON validates commands before adding them:</p> <pre><code># Invalid command (missing required option)\nbamon add test_script\n# Error: --command is required\n\n# Duplicate name\nbamon add existing_script --command \"echo test\"\n# Error: Script 'existing_script' already exists\n</code></pre>"},{"location":"commands/add/#script-naming","title":"Script Naming","text":""},{"location":"commands/add/#valid-names","title":"Valid Names","text":"<ul> <li>Alphanumeric characters: <code>health_check</code>, <code>disk_usage</code>, <code>api_monitor</code></li> <li>Underscores: <code>system_health</code>, <code>user_count</code></li> <li>Numbers: <code>check_1</code>, <code>monitor_v2</code></li> </ul>"},{"location":"commands/add/#invalid-names","title":"Invalid Names","text":"<ul> <li>Spaces: <code>health check</code> (use underscores instead)</li> <li>Special characters: <code>health-check!</code> (use underscores instead)</li> <li>Reserved words: <code>status</code>, <code>add</code>, <code>remove</code> (BAMON command names)</li> </ul>"},{"location":"commands/add/#best-practices","title":"Best Practices","text":""},{"location":"commands/add/#script-design","title":"Script Design","text":"<ol> <li>Use descriptive names: <code>health_check</code> instead of <code>hc</code></li> <li>Include descriptions: Help others understand the script's purpose</li> <li>Test commands manually: Verify they work before adding</li> <li>Use appropriate intervals: Balance monitoring frequency with system load</li> <li>Handle errors gracefully: Scripts should exit with appropriate codes</li> </ol>"},{"location":"commands/add/#example-scripts","title":"Example Scripts","text":"<pre><code># HTTP health check\nbamon add api_health \\\n  --command \"curl -s -o /dev/null -w '%{http_code}' https://api.example.com/health\" \\\n  --interval 30 \\\n  --description \"Check API health every 30 seconds\"\n\n# Disk space monitoring\nbamon add disk_space \\\n  --command \"df -h / | awk 'NR==2 {print \\$5}' | sed 's/%//' | awk '{if(\\$1&gt;90) exit 1; else exit 0}'\" \\\n  --interval 300 \\\n  --description \"Alert if disk usage exceeds 90%\"\n\n# Service status check\nbamon add nginx_status \\\n  --command \"systemctl is-active nginx\" \\\n  --interval 60 \\\n  --description \"Check if Nginx service is running\"\n</code></pre>"},{"location":"commands/add/#related-commands","title":"Related Commands","text":"<ul> <li>list - List all configured scripts</li> <li>remove - Remove a script from monitoring</li> <li>status - Check script execution status</li> <li>config - Manage configuration</li> </ul>"},{"location":"commands/add/#troubleshooting","title":"Troubleshooting","text":""},{"location":"commands/add/#common-issues","title":"Common Issues","text":"<p>Script not executing: Check if script is enabled <pre><code>bamon list --enabled-only\n</code></pre></p> <p>Command syntax errors: Test command manually first <pre><code># Test the command\ncurl -s -o /dev/null -w '%{http_code}' https://httpbin.org/status/200\n\n# Then add it\nbamon add test --command \"curl -s -o /dev/null -w '%{http_code}' https://httpbin.org/status/200\"\n</code></pre></p> <p>Duplicate name error: Use a different name or remove existing script <pre><code># Check existing scripts\nbamon list\n\n# Remove if needed\nbamon remove old_script\n</code></pre></p>"},{"location":"commands/config/","title":"config Command","text":"<p>Manage BAMON configuration files and settings.</p>"},{"location":"commands/config/#syntax","title":"Syntax","text":"<pre><code>bamon config &lt;subcommand&gt; [options]\n</code></pre>"},{"location":"commands/config/#subcommands","title":"Subcommands","text":"Subcommand Description <code>show</code> Display current configuration <code>edit</code> Edit configuration file <code>validate</code> Validate configuration syntax <code>reset</code> Reset to default configuration"},{"location":"commands/config/#examples","title":"Examples","text":""},{"location":"commands/config/#show-configuration","title":"Show Configuration","text":"<pre><code># Display current configuration\nbamon config show\n</code></pre> <p>Output: <pre><code>BAMON Configuration\n==================\n\nDaemon Settings:\n  Default Interval: 60s\n  Log File: ~/.local/share/bamon/logs/bamon.log\n  PID File: ~/.local/share/bamon/bamon.pid\n  Max Concurrent: 10\n\nSandbox Settings:\n  Timeout: 30s\n  Max CPU Time: 60s\n  Max File Size: 10240KB\n  Max Virtual Memory: 102400KB\n\nPerformance Settings:\n  Monitoring: enabled\n  Load Threshold: 0.8\n  Optimize Scheduling: enabled\n\nScripts: 3 configured\n</code></pre></p>"},{"location":"commands/config/#edit-configuration","title":"Edit Configuration","text":"<pre><code># Edit configuration file\nbamon config edit\n</code></pre> <p>Output: <pre><code>Opening configuration file in editor...\n</code></pre></p>"},{"location":"commands/config/#validate-configuration","title":"Validate Configuration","text":"<pre><code># Validate configuration syntax\nbamon config validate\n</code></pre> <p>Output: <pre><code>Configuration validation passed\n</code></pre></p>"},{"location":"commands/config/#reset-configuration","title":"Reset Configuration","text":"<pre><code># Reset to default configuration\nbamon config reset\n</code></pre> <p>Output: <pre><code>Configuration reset to defaults\nBackup saved to: ~/.config/bamon/config.yaml.backup\n</code></pre></p>"},{"location":"commands/config/#related-commands","title":"Related Commands","text":"<ul> <li>status - Check daemon status</li> <li>start - Start the daemon process</li> <li>performance - Show performance metrics</li> </ul>"},{"location":"commands/list/","title":"list Command","text":"<p>List all configured scripts with their status and details.</p>"},{"location":"commands/list/#syntax","title":"Syntax","text":"<pre><code>bamon list [options]\n</code></pre>"},{"location":"commands/list/#options","title":"Options","text":"Option Short Description <code>--enabled-only</code> <code>-e</code> Show only enabled scripts <code>--disabled-only</code> <code>-d</code> Show only disabled scripts <code>--json</code> <code>-j</code> Output in JSON format"},{"location":"commands/list/#examples","title":"Examples","text":""},{"location":"commands/list/#list-all-scripts","title":"List All Scripts","text":"<pre><code># Show all configured scripts\nbamon list\n</code></pre> <p>Output: <pre><code>Configured Scripts\n=================\n\nName            Status    Interval    Description\nhealth_check    enabled   30s         HTTP health check\ndisk_usage      enabled   300s        Monitor disk usage\nmaintenance     disabled  3600s       Hourly maintenance\n</code></pre></p>"},{"location":"commands/list/#enabled-scripts-only","title":"Enabled Scripts Only","text":"<pre><code># Show only enabled scripts\nbamon list --enabled-only\n</code></pre> <p>Output: <pre><code>Enabled Scripts\n===============\n\nName            Interval    Description\nhealth_check    30s         HTTP health check\ndisk_usage      300s        Monitor disk usage\n</code></pre></p>"},{"location":"commands/list/#json-output","title":"JSON Output","text":"<pre><code># Get list in JSON format\nbamon list --json\n</code></pre> <p>Output: <pre><code>{\n  \"scripts\": [\n    {\n      \"name\": \"health_check\",\n      \"command\": \"curl -s https://httpbin.org/status/200\",\n      \"interval\": 30,\n      \"enabled\": true,\n      \"description\": \"HTTP health check\"\n    },\n    {\n      \"name\": \"disk_usage\",\n      \"command\": \"df -h / | awk 'NR==2 {print $5}' | sed 's/%//'\",\n      \"interval\": 300,\n      \"enabled\": true,\n      \"description\": \"Monitor disk usage\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"commands/list/#related-commands","title":"Related Commands","text":"<ul> <li>add - Add a new script to monitor</li> <li>remove - Remove a script from monitoring</li> <li>status - Check script execution status</li> </ul>"},{"location":"commands/now/","title":"now Command","text":"<p>Execute all enabled scripts immediately (manual trigger).</p>"},{"location":"commands/now/#syntax","title":"Syntax","text":"<pre><code>bamon now [options]\n</code></pre>"},{"location":"commands/now/#options","title":"Options","text":"Option Short Argument Description <code>--name</code> <code>-n</code> script_name Execute only specific script by name"},{"location":"commands/now/#examples","title":"Examples","text":""},{"location":"commands/now/#execute-all-scripts","title":"Execute All Scripts","text":"<pre><code># Execute all enabled scripts immediately\nbamon now\n</code></pre> <p>Output: <pre><code>Executing all enabled scripts\n=============================\n\nExecuting script: health_check\n===============================\n200\nScript execution completed successfully\n\nExecuting script: disk_usage\n=============================\n45\nScript execution completed successfully\n\nAll scripts executed successfully\n</code></pre></p>"},{"location":"commands/now/#execute-specific-script","title":"Execute Specific Script","text":"<pre><code># Execute only the health_check script\nbamon now --name health_check\n</code></pre> <p>Output: <pre><code>Executing script: health_check\n===============================\n200\nScript execution completed successfully\n</code></pre></p>"},{"location":"commands/now/#script-execution-failure","title":"Script Execution Failure","text":"<pre><code># When a script fails\nbamon now --name failing_script\n</code></pre> <p>Output: <pre><code>Executing script: failing_script\n===============================\nScript execution failed\n</code></pre></p>"},{"location":"commands/now/#use-cases","title":"Use Cases","text":""},{"location":"commands/now/#manual-testing","title":"Manual Testing","text":"<pre><code># Test a script before enabling it\nbamon add test_script --command \"echo 'Hello World'\" --disabled\nbamon now --name test_script\nbamon remove test_script\n</code></pre>"},{"location":"commands/now/#emergency-execution","title":"Emergency Execution","text":"<pre><code># Run critical scripts immediately\nbamon now --name backup_script\nbamon now --name health_check\n</code></pre>"},{"location":"commands/now/#debugging","title":"Debugging","text":"<pre><code># Test script execution for debugging\nbamon now --name problematic_script\n# Check the output and fix issues\n</code></pre>"},{"location":"commands/now/#execution-environment","title":"Execution Environment","text":"<p>Scripts executed with <code>bamon now</code> run in the same environment as scheduled execution:</p> <ul> <li>Sandboxed execution with resource limits</li> <li>Timeout protection (configurable per script)</li> <li>Resource monitoring and logging</li> <li>Error handling and status reporting</li> </ul>"},{"location":"commands/now/#related-commands","title":"Related Commands","text":"<ul> <li>status - Check script execution status</li> <li>start - Start daemon for scheduled execution</li> <li>add - Add scripts to monitor</li> <li>list - List all configured scripts</li> </ul>"},{"location":"commands/now/#troubleshooting","title":"Troubleshooting","text":""},{"location":"commands/now/#script-not-found","title":"Script Not Found","text":"<pre><code># Check if script exists\nbamon list --name script_name\n\n# List all scripts\nbamon list\n</code></pre>"},{"location":"commands/now/#execution-failures","title":"Execution Failures","text":"<pre><code># Check script status\nbamon status --name script_name\n\n# View detailed status\nbamon status --verbose --name script_name\n</code></pre>"},{"location":"commands/now/#permission-issues","title":"Permission Issues","text":"<pre><code># Check if daemon is running\nbamon status\n\n# Start daemon if needed\nbamon start --daemon\n</code></pre>"},{"location":"commands/performance/","title":"performance Command","text":"<p>Show system performance metrics and BAMON optimization status.</p>"},{"location":"commands/performance/#syntax","title":"Syntax","text":"<pre><code>bamon performance [options]\n</code></pre>"},{"location":"commands/performance/#options","title":"Options","text":"Option Short Description <code>--verbose</code> <code>-v</code> Show detailed performance information <code>--format</code> <code>-f</code> Output format (table, json) <code>--json</code> <code>-j</code> Output in JSON format"},{"location":"commands/performance/#examples","title":"Examples","text":""},{"location":"commands/performance/#basic-performance","title":"Basic Performance","text":"<pre><code># Show performance metrics\nbamon performance\n</code></pre> <p>Output: <pre><code>System Performance\n=================\n\nLoad Average: 0.45, 0.52, 0.48\nMemory Usage: 45.2%\nDisk Usage: 67.8%\nCPU Usage: 12.3%\n\nBAMON Performance\n=================\n\nActive Scripts: 3\nTotal Executions: 1,247\nFailed Executions: 12\nAverage Execution Time: 0.8s\n</code></pre></p>"},{"location":"commands/performance/#verbose-output","title":"Verbose Output","text":"<pre><code># Show detailed performance information\nbamon performance --verbose\n</code></pre> <p>Output: <pre><code>System Performance\n=================\n\nLoad Average: 0.45, 0.52, 0.48\nMemory Usage: 45.2% (3.6GB / 8.0GB)\nDisk Usage: 67.8% (340GB / 500GB)\nCPU Usage: 12.3%\n\nBAMON Performance\n=================\n\nActive Scripts: 3\nTotal Executions: 1,247\nFailed Executions: 12\nAverage Execution Time: 0.8s\nLast Execution: 2024-01-15 10:30:15\nNext Execution: 2024-01-15 10:31:15\n\nScript Performance\n==================\n\nhealth_check: 0.2s avg, 98% success rate\ndisk_usage: 0.1s avg, 100% success rate\napi_health: 1.2s avg, 95% success rate\n</code></pre></p>"},{"location":"commands/performance/#json-output","title":"JSON Output","text":"<pre><code># Get performance data in JSON format\nbamon performance --json\n</code></pre> <p>Output: <pre><code>{\n  \"system\": {\n    \"load_average\": [0.45, 0.52, 0.48],\n    \"memory_usage\": 45.2,\n    \"disk_usage\": 67.8,\n    \"cpu_usage\": 12.3\n  },\n  \"bamon\": {\n    \"active_scripts\": 3,\n    \"total_executions\": 1247,\n    \"failed_executions\": 12,\n    \"average_execution_time\": 0.8,\n    \"last_execution\": \"2024-01-15T10:30:15Z\",\n    \"next_execution\": \"2024-01-15T10:31:15Z\"\n  },\n  \"scripts\": [\n    {\n      \"name\": \"health_check\",\n      \"average_time\": 0.2,\n      \"success_rate\": 98,\n      \"total_executions\": 1247,\n      \"failed_executions\": 25\n    }\n  ]\n}\n</code></pre></p>"},{"location":"commands/performance/#related-commands","title":"Related Commands","text":"<ul> <li>status - Check script execution status</li> <li>start - Start the daemon process</li> <li>config - Manage configuration</li> </ul>"},{"location":"commands/remove/","title":"remove Command","text":"<p>Remove a script from monitoring.</p>"},{"location":"commands/remove/#syntax","title":"Syntax","text":"<pre><code>bamon remove &lt;name&gt; [options]\n</code></pre>"},{"location":"commands/remove/#arguments","title":"Arguments","text":"Argument Required Description <code>name</code> Yes Script name/ID to remove"},{"location":"commands/remove/#options","title":"Options","text":"Option Short Description <code>--force</code> <code>-f</code> Remove without confirmation"},{"location":"commands/remove/#examples","title":"Examples","text":""},{"location":"commands/remove/#basic-removal","title":"Basic Removal","text":"<pre><code># Remove a script\nbamon remove health_check\n</code></pre> <p>Output: <pre><code>Script 'health_check' removed successfully\n</code></pre></p>"},{"location":"commands/remove/#force-removal","title":"Force Removal","text":"<pre><code># Remove without confirmation\nbamon remove old_script --force\n</code></pre> <p>Output: <pre><code>Script 'old_script' removed successfully\n</code></pre></p>"},{"location":"commands/remove/#related-commands","title":"Related Commands","text":"<ul> <li>add - Add a new script to monitor</li> <li>list - List all configured scripts</li> <li>status - Check script execution status</li> </ul>"},{"location":"commands/restart/","title":"restart Command","text":"<p>Restart the BAMON daemon process.</p>"},{"location":"commands/restart/#syntax","title":"Syntax","text":"<pre><code>bamon restart [options]\n</code></pre>"},{"location":"commands/restart/#options","title":"Options","text":"Option Short Description <code>--daemon</code> <code>-d</code> Run in background (daemon mode) <code>--config</code> <code>-c</code> Specify custom config file path"},{"location":"commands/restart/#examples","title":"Examples","text":""},{"location":"commands/restart/#restart-daemon","title":"Restart Daemon","text":"<pre><code># Restart daemon in background\nbamon restart --daemon\n</code></pre> <p>Output: <pre><code>BAMON daemon restarted successfully\nPID: 12346\nLog file: ~/.local/share/bamon/logs/bamon.log\n</code></pre></p>"},{"location":"commands/restart/#restart-with-custom-config","title":"Restart with Custom Config","text":"<pre><code># Restart with custom configuration\nbamon restart --daemon --config /path/to/config.yaml\n</code></pre> <p>Output: <pre><code>BAMON daemon restarted successfully\nConfiguration: /path/to/config.yaml\nPID: 12346\nLog file: ~/.local/share/bamon/logs/bamon.log\n</code></pre></p>"},{"location":"commands/restart/#related-commands","title":"Related Commands","text":"<ul> <li>start - Start the daemon process</li> <li>stop - Stop the daemon process</li> <li>status - Check daemon status</li> </ul>"},{"location":"commands/start/","title":"start Command","text":"<p>Start the BAMON daemon process.</p>"},{"location":"commands/start/#syntax","title":"Syntax","text":"<pre><code>bamon start [options]\n</code></pre>"},{"location":"commands/start/#options","title":"Options","text":"Option Short Description <code>--daemon</code> <code>-d</code> Run in background (daemon mode) <code>--config</code> <code>-c</code> Specify custom config file path"},{"location":"commands/start/#examples","title":"Examples","text":""},{"location":"commands/start/#start-daemon","title":"Start Daemon","text":"<pre><code># Start daemon in background\nbamon start --daemon\n</code></pre> <p>Output: <pre><code>BAMON daemon started successfully\nPID: 12345\nLog file: ~/.local/share/bamon/logs/bamon.log\n</code></pre></p>"},{"location":"commands/start/#start-with-custom-config","title":"Start with Custom Config","text":"<pre><code># Start with custom configuration\nbamon start --daemon --config /path/to/config.yaml\n</code></pre> <p>Output: <pre><code>BAMON daemon started successfully\nConfiguration: /path/to/config.yaml\nPID: 12345\nLog file: ~/.local/share/bamon/logs/bamon.log\n</code></pre></p>"},{"location":"commands/start/#related-commands","title":"Related Commands","text":"<ul> <li>stop - Stop the daemon process</li> <li>restart - Restart the daemon process</li> <li>status - Check daemon status</li> </ul>"},{"location":"commands/status/","title":"status Command","text":"<p>Display current status of all configured scripts with execution details.</p>"},{"location":"commands/status/#syntax","title":"Syntax","text":"<pre><code>bamon status [options]\n</code></pre>"},{"location":"commands/status/#options","title":"Options","text":"Option Short Argument Description <code>--verbose</code> <code>-v</code> Show detailed information including full output <code>--failed-only</code> <code>-f</code> Show only failed scripts <code>--json</code> <code>-j</code> Output in JSON format <code>--name</code> <code>-n</code> script_name Check status of a specific script"},{"location":"commands/status/#examples","title":"Examples","text":""},{"location":"commands/status/#basic-status-check","title":"Basic Status Check","text":"<pre><code># Show status of all scripts\nbamon status\n</code></pre> <p>Output: <pre><code>Script Status Report\n===================\n\nName            Status    Last Run           Next Run            Interval\nhealth_check    success   2024-01-15 10:30   2024-01-15 11:00   30s\ndisk_usage      success   2024-01-15 10:25   2024-01-15 15:25   300s\ngithub_status   failed    2024-01-15 10:20   2024-01-15 10:50   30s\n</code></pre></p>"},{"location":"commands/status/#verbose-output","title":"Verbose Output","text":"<pre><code># Show detailed status with full output\nbamon status --verbose\n</code></pre> <p>Output: <pre><code>Script Status Report\n===================\n\nName: health_check\nStatus: success\nLast Run: 2024-01-15 10:30:15\nNext Run: 2024-01-15 11:00:15\nInterval: 30s\nCommand: curl -s https://httpbin.org/status/200\nOutput:\n200\n\nName: disk_usage\nStatus: success\nLast Run: 2024-01-15 10:25:10\nNext Run: 2024-01-15 15:25:10\nInterval: 300s\nCommand: df -h / | awk 'NR==2 {print $5}' | sed 's/%//'\nOutput:\n45\n</code></pre></p>"},{"location":"commands/status/#failed-scripts-only","title":"Failed Scripts Only","text":"<pre><code># Show only failed scripts\nbamon status --failed-only\n</code></pre> <p>Output: <pre><code>Failed Scripts\n=============\n\nName: github_status\nStatus: failed\nLast Run: 2024-01-15 10:20:05\nError: Connection timeout\nCommand: curl -s https://www.githubstatus.com/api/v2/status.json\n</code></pre></p>"},{"location":"commands/status/#specific-script-status","title":"Specific Script Status","text":"<pre><code># Check status of a specific script\nbamon status --name health_check\n</code></pre> <p>Output: <pre><code>Script: health_check\nStatus: success\nLast Run: 2024-01-15 10:30:15\nNext Run: 2024-01-15 11:00:15\nInterval: 30s\nCommand: curl -s https://httpbin.org/status/200\n</code></pre></p>"},{"location":"commands/status/#json-output","title":"JSON Output","text":"<pre><code># Get status in JSON format\nbamon status --json\n</code></pre> <p>Output: <pre><code>{\n  \"scripts\": [\n    {\n      \"name\": \"health_check\",\n      \"status\": \"success\",\n      \"last_run\": \"2024-01-15T10:30:15Z\",\n      \"next_run\": \"2024-01-15T11:00:15Z\",\n      \"interval\": 30,\n      \"command\": \"curl -s https://httpbin.org/status/200\",\n      \"output\": \"200\"\n    },\n    {\n      \"name\": \"disk_usage\",\n      \"status\": \"success\",\n      \"last_run\": \"2024-01-15T10:25:10Z\",\n      \"next_run\": \"2024-01-15T15:25:10Z\",\n      \"interval\": 300,\n      \"command\": \"df -h / | awk 'NR==2 {print $5}' | sed 's/%//'\",\n      \"output\": \"45\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"commands/status/#status-values","title":"Status Values","text":"Status Description <code>success</code> Script executed successfully <code>failed</code> Script execution failed <code>running</code> Script is currently executing <code>disabled</code> Script is disabled <code>never</code> Script has never been executed"},{"location":"commands/status/#use-cases","title":"Use Cases","text":""},{"location":"commands/status/#monitoring-dashboard","title":"Monitoring Dashboard","text":"<pre><code># Create a simple monitoring dashboard\nbamon status --json | jq -r '.scripts[] | \"\\(.name): \\(.status)\"'\n</code></pre>"},{"location":"commands/status/#health-check-script","title":"Health Check Script","text":"<pre><code># Check if any scripts are failing\nif bamon status --failed-only --json | jq -e '.scripts | length &gt; 0'; then\n    echo \"Some monitoring scripts are failing!\"\n    exit 1\nfi\n</code></pre>"},{"location":"commands/status/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Check script execution times\nbamon status --verbose | grep -E \"(Name|Last Run|Status)\"\n</code></pre>"},{"location":"commands/status/#related-commands","title":"Related Commands","text":"<ul> <li>list - List all configured scripts</li> <li>now - Execute all scripts immediately</li> <li>performance - Show system performance metrics</li> <li>config - Manage configuration</li> </ul>"},{"location":"commands/status/#troubleshooting","title":"Troubleshooting","text":""},{"location":"commands/status/#no-scripts-found","title":"No Scripts Found","text":"<p>If <code>bamon status</code> shows no scripts:</p> <ol> <li>Check if scripts are configured: <code>bamon list</code></li> <li>Verify configuration: <code>bamon config validate</code></li> <li>Check if daemon is running: <code>bamon start --daemon</code></li> </ol>"},{"location":"commands/status/#status-not-updating","title":"Status Not Updating","text":"<p>If status information seems outdated:</p> <ol> <li>Check daemon status: <code>bamon status</code></li> <li>Restart daemon: <code>bamon restart</code></li> <li>Check logs: <code>tail -f ~/.local/share/bamon/logs/bamon.log</code></li> </ol>"},{"location":"commands/stop/","title":"stop Command","text":"<p>Stop the BAMON daemon process.</p>"},{"location":"commands/stop/#syntax","title":"Syntax","text":"<pre><code>bamon stop [options]\n</code></pre>"},{"location":"commands/stop/#options","title":"Options","text":"Option Short Description <code>--force</code> <code>-f</code> Force kill the daemon"},{"location":"commands/stop/#examples","title":"Examples","text":""},{"location":"commands/stop/#stop-daemon","title":"Stop Daemon","text":"<pre><code># Stop the daemon gracefully\nbamon stop\n</code></pre> <p>Output: <pre><code>BAMON daemon stopped successfully\n</code></pre></p>"},{"location":"commands/stop/#force-stop","title":"Force Stop","text":"<pre><code># Force kill the daemon\nbamon stop --force\n</code></pre> <p>Output: <pre><code>BAMON daemon force stopped\n</code></pre></p>"},{"location":"commands/stop/#related-commands","title":"Related Commands","text":"<ul> <li>start - Start the daemon process</li> <li>restart - Restart the daemon process</li> <li>status - Check daemon status</li> </ul>"}]}