# Task ID: 25
# Title: Setup Project Structure and Configuration Management
# Status: cancelled
# Dependencies: None
# Priority: high
# Description: Create the initial project structure and implement configuration management using YAML for the Bash Daemon Monitor.
# Details:
1. Create the directory structure as specified in the PRD:
   ```
   bamon/
   ├── bamon                    # Main executable (generated by bashly)
   ├── bashly.yml              # Bashly configuration
   ├── src/
   │   ├── lib/
   │   │   ├── config.sh       # Configuration management
   │   │   ├── execution.sh    # Script execution and daemon loop
   │   │   ├── logging.sh      # Logging functions
   │   │   ├── sandbox.sh      # Script sandboxing
   │   │   └── performance.sh  # Performance optimization
   │   └── *_command.sh        # CLI command implementations
   ├── config.yaml             # Daemon configuration
   └── install.sh              # Installation script
   ```
2. Set up the Bashly configuration file (bashly.yml) with command structure:
   - Define all commands: status, add, remove, list, now, start, stop, restart, performance, config
   - Include subcommands for config: edit, show, validate
   - Define command options and arguments
3. Implement the config.sh library for YAML configuration management:
   - Use 'yq' (version 4.x+) for YAML parsing
   - Implement functions to read, validate, and write configuration
   - Create default configuration if none exists
   - Support environment variable overrides
4. Create the default config.yaml template with all required sections:
   - daemon section with default_interval, log_file, pid_file, etc.
   - sandbox section with timeout, max_cpu_time, etc.
   - performance section with monitoring settings
   - scripts section with sample monitoring scripts
5. Implement configuration validation to ensure all required fields exist
6. Create helper functions for accessing configuration values throughout the application

# Test Strategy:
1. Verify the project structure is created correctly
2. Test configuration loading with valid and invalid YAML files
3. Verify default configuration is created when none exists
4. Test configuration validation with missing required fields
5. Verify environment variable overrides work correctly
6. Test reading and writing configuration values
7. Verify the Bashly configuration generates the expected CLI structure
8. Test the config command and its subcommands
