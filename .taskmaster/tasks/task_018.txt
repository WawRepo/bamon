# Task ID: 18
# Title: Create Comprehensive Documentation
# Status: pending
# Dependencies: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14
# Priority: medium
# Description: Develop comprehensive documentation including README, man pages, and usage examples.
# Details:
1. Create README.md with installation and usage instructions:
```markdown
# Bash Daemon Monitor (bamon)

A configurable bash daemon that monitors and executes bash scripts/code snippets at specified intervals, providing a CLI interface for management.

## Features

- Monitor and execute bash scripts at configurable intervals
- Simple CLI interface for managing monitored scripts
- Support for HTTP health checks and any bash commands
- Configurable execution intervals and concurrent execution limits
- Detailed status reporting and logging

## Installation

### Quick Install

```bash
git clone https://github.com/yourusername/bash-daemon-monitor.git
cd bash-daemon-monitor
sudo ./install.sh
```

### Manual Installation

1. Install dependencies:
   - bash (4.0 or later)
   - curl (for HTTP health checks)
   - standard Unix tools

2. Clone the repository:
   ```bash
   git clone https://github.com/yourusername/bash-daemon-monitor.git
   cd bash-daemon-monitor
   ```

3. Generate the binary:
   ```bash
   bashly generate
   ```

4. Install manually:
   ```bash
   sudo cp ./bamon /usr/local/bin/
   sudo mkdir -p /etc/bamon
   sudo cp ./config.yaml.example /etc/bamon/config.yaml
   ```

## Usage

### Basic Commands

- **Start the daemon:**
  ```bash
  bamon start --daemon
  ```

- **Check status:**
  ```bash
  bamon status
  ```

- **Add a script to monitor:**
  ```bash
  bamon add "disk_check" --command "df -h / | awk 'NR==2 {print $5}' | sed 's/%//' | awk '{if($1>80) exit 1; else exit 0}'" --interval 300 --description "Check if disk usage is under 80%"
  ```

- **Run all scripts now:**
  ```bash
  bamon now
  ```

- **Stop the daemon:**
  ```bash
  bamon stop
  ```

### Configuration

The default configuration file is located at `/etc/bamon/config.yaml`. You can specify a custom configuration file with the `--config` option.

Example configuration:

```yaml
daemon:
  default_interval: 60
  log_file: "/var/log/bamon/bamon.log"
  pid_file: "/var/run/bamon.pid"
  max_concurrent: 10

scripts:
  - name: "google_health_check"
    command: "curl -s -o /dev/null -w '%{http_code}' https://google.com; [ "$code" -eq 200 ] || { echo "$code"; exit 1; }"
    interval: 30
    enabled: true
    description: "Check if Google is accessible"
  
  - name: "disk_space_check"
    command: "df -h / | awk 'NR==2 {print $5}' | sed 's/%//' | awk '{if($1>80) exit 1; else exit 0}'"
    interval: 300
    enabled: true
    description: "Check if disk usage is under 80%"
```

## Examples

### HTTP Health Check

```bash
bamon add "website_check" --command "curl -s -o /dev/null -w '%{http_code}' https://example.com; [ $? -eq 0 ] || exit 1" --interval 60 --description "Check if example.com is accessible"
```

### System Resource Check

```bash
bamon add "memory_check" --command "free -m | awk '/^Mem:/ {print $3/$2 * 100.0}' | awk '{if($1>90) exit 1; else exit 0}'" --interval 300 --description "Check if memory usage is under 90%"
```

### Process Check

```bash
bamon add "nginx_check" --command "pgrep nginx > /dev/null || exit 1" --interval 60 --description "Check if Nginx is running"
```

## License

MIT
```

2. Create man page in `docs/bamon.1.md`:
```markdown
% BAMON(1) Bash Daemon Monitor 0.1.0
% Your Name
% November 2023

# NAME

bamon - Bash Daemon Monitor

# SYNOPSIS

**bamon** *command* [options]

# DESCRIPTION

Bash Daemon Monitor (bamon) is a tool for monitoring and executing bash scripts at specified intervals. It provides a simple CLI interface for managing monitored scripts.

# COMMANDS

**status** [options]
: Display current status of all configured scripts

**add** *name* [options]
: Add a new script to monitor

**remove** *name* [options]
: Remove a script from monitoring

**now** [options]
: Execute all enabled scripts immediately

**start** [options]
: Start the daemon process

**stop** [options]
: Stop the daemon process

**restart** [options]
: Restart the daemon process

**list** [options]
: List all configured scripts

# OPTIONS

## Global Options

**--help**
: Show help message

**--version**
: Show version information

## Status Command Options

**--verbose**, **-v**
: Show detailed information including full output

**--failed-only**, **-f**
: Show only failed scripts

## Add Command Options

**--command**, **-c** *command*
: Bash command/code to execute

**--interval**, **-i** *seconds*
: Execution interval in seconds (default: 60)

**--description**, **-d** *text*
: Description of what the script does

**--enabled**
: Set script as enabled (default)

**--disabled**
: Set script as disabled

## Remove Command Options

**--force**, **-f**
: Remove without confirmation

## Now Command Options

**--name**, **-n** *script_name*
: Execute only specific script by name

**--async**, **-a**
: Execute scripts asynchronously (default: sequential)

## Start Command Options

**--daemon**, **-d**
: Run in background (daemon mode)

**--config**, **-c** *file*
: Specify custom config file path

## Stop Command Options

**--force**, **-f**
: Force kill the daemon

## List Command Options

**--enabled-only**, **-e**
: Show only enabled scripts

**--disabled-only**, **-d**
: Show only disabled scripts

# FILES

**/etc/bamon/config.yaml**
: Default configuration file

**/var/log/bamon/bamon.log**
: Default log file

**/var/run/bamon.pid**
: Default PID file

# EXAMPLES

Start the daemon in background:

    bamon start --daemon

Add a script to monitor disk space:

    bamon add disk_check --command "df -h / | awk 'NR==2 {print $5}' | sed 's/%//' | awk '{if($1>80) exit 1; else exit 0}'" --interval 300 --description "Check if disk usage is under 80%"

Check status of all scripts:

    bamon status

Execute all scripts immediately:

    bamon now

# SEE ALSO

**bash**(1), **curl**(1)
```

3. Create usage examples in `docs/examples.md`
4. Add inline documentation in all source files
5. Create a FAQ document addressing common questions
6. Add troubleshooting guide for common issues

# Test Strategy:
1. Verify README contains all required information for installation and usage
2. Test man page generation and formatting
3. Verify examples work as documented
4. Test inline documentation is accessible through --help commands
5. Verify FAQ addresses common questions and issues
6. Test troubleshooting guide with simulated issues
