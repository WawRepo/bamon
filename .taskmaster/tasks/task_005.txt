# Task ID: 5
# Title: Implement Status Command
# Status: done
# Dependencies: 2, 3
# Priority: medium
# Description: Create the status command to display the current status of all configured scripts with options for verbose output and filtering failed scripts.
# Details:
1. Implement the status command in `src/status_command.sh`:
```bash
#!/usr/bin/env bash

source "${BASH_SOURCE%/*}/lib/config.sh"

function status_command() {
  local verbose=${args[--verbose]}
  local failed_only=${args[--failed-only]}
  
  # Load config
  load_config
  
  # Get daemon status
  if is_daemon_running; then
    local pid=$(cat "$(get_pid_file)")
    echo "Daemon: RUNNING (PID: $pid)"
  else
    echo "Daemon: STOPPED"
  fi
  echo ""
  
  # Get all scripts
  local scripts=$(get_all_scripts)
  if [[ -z "$scripts" ]]; then
    echo "No scripts configured. Use 'bamon add' to add scripts."
    return
  fi
  
  # Print header
  printf "%-20s %-10s %-20s %-20s\n" "NAME" "STATUS" "LAST RUN" "NEXT RUN"
  printf "%s\n" "$(printf '%.0s-' {1..70})"
  
  # Print each script status
  for script in $scripts; do
    local status=$(get_script_status "$script")
    local last_run=$(get_script_last_run_formatted "$script")
    local next_run=$(get_script_next_run_formatted "$script")
    local enabled=$(is_script_enabled "$script" && echo "true" || echo "false")
    
    # Skip if we're only showing failed scripts and this one is OK
    if [[ "$failed_only" == "true" && "$status" != "FAILED" && "$status" != "ERROR" ]]; then
      continue
    fi
    
    # If script is disabled, show DISABLED status
    if [[ "$enabled" != "true" ]]; then
      status="DISABLED"
    fi
    
    # Print basic status line
    printf "%-20s %-10s %-20s %-20s\n" "$script" "$status" "$last_run" "$next_run"
    
    # If verbose and script has output, show it
    if [[ "$verbose" == "true" ]]; then
      local output=$(get_script_last_output "$script")
      if [[ -n "$output" ]]; then
        echo "  Output:"
        echo "$output" | sed 's/^/    /'
      fi
      
      # Show script details
      local command=$(get_script_command "$script")
      local interval=$(get_script_interval "$script")
      local description=$(get_script_description "$script")
      
      echo "  Details:"
      echo "    Command: $command"
      echo "    Interval: $interval seconds"
      if [[ -n "$description" ]]; then
        echo "    Description: $description"
      fi
      echo ""
    fi
  done
}
```
2. Implement helper functions to get script status, last run time, next run time
3. Format output in a readable table format
4. Add support for verbose output with full command and last output
5. Implement filtering for failed scripts only

# Test Strategy:
1. Test status command with no scripts configured
2. Test with multiple scripts in different states (OK, FAILED, DISABLED)
3. Verify verbose output shows additional details
4. Test failed-only filter shows only failed scripts
5. Verify formatting is consistent and readable
