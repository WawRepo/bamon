# Task ID: 12
# Title: Implement Script Execution Sandboxing
# Status: done
# Dependencies: 3, 8
# Priority: medium
# Description: Create a sandboxed environment for script execution with resource limits and timeout handling.
# Details:
1. Create `src/lib/sandbox.sh` for script execution in a controlled environment:
```bash
#!/usr/bin/env bash

source "${BASH_SOURCE%/*}/logger.sh"

# Execute script in a sandboxed environment
function execute_sandboxed() {
  local script_name=$1
  local command=$2
  local timeout=$3
  
  if [[ -z "$timeout" ]]; then
    timeout=30  # Default timeout: 30 seconds
  fi
  
  log_debug "Executing '$script_name' in sandbox with ${timeout}s timeout"
  
  # Create temporary directory for script
  local temp_dir=$(mktemp -d)
  local temp_script="${temp_dir}/script.sh"
  
  # Write command to temporary script
  cat > "$temp_script" << EOF
#!/usr/bin/env bash
set -e
$command
EOF
  
  chmod +x "$temp_script"
  
  # Execute with resource limits
  local output
  local exit_code
  
  # Use timeout and ulimit to restrict resources
  output=$(
    ulimit -t $((timeout * 2)) -f 10240 -v 102400 && \
    timeout ${timeout}s "$temp_script" 2>&1
  )
  exit_code=$?
  
  # Clean up temporary files
  rm -rf "$temp_dir"
  
  # Handle timeout specifically
  if [[ $exit_code -eq 124 ]]; then
    log_error "Script '$script_name' timed out after ${timeout}s"
    output="ERROR: Script execution timed out after ${timeout} seconds\n${output}"
  fi
  
  # Return results
  echo "$exit_code:$output"
}
```
2. Update script execution in daemon and now command to use sandboxed execution
3. Implement resource limits (CPU, memory, disk I/O)
4. Add timeout handling with configurable timeout value
5. Create temporary directory for each script execution
6. Implement cleanup of temporary files after execution

# Test Strategy:
1. Test script execution with various resource-intensive scripts
2. Verify timeout handling stops scripts that run too long
3. Test resource limits prevent excessive resource usage
4. Verify temporary files are cleaned up after execution
5. Test error handling for scripts that attempt to access restricted resources
6. Verify sandbox doesn't interfere with legitimate script functionality
