# Task ID: 6
# Title: Implement Add Command
# Status: done
# Dependencies: 2
# Priority: medium
# Description: Create the add command to register new scripts for monitoring with validation of inputs.
# Details:
1. Implement the add command in `src/add_command.sh`:
```bash
#!/usr/bin/env bash

source "${BASH_SOURCE%/*}/lib/config.sh"
source "${BASH_SOURCE%/*}/lib/logger.sh"

function add_command() {
  local name=${args[name]}
  local command=${args[--command]}
  local interval=${args[--interval]}
  local description=${args[--description]}
  local disabled=${args[--disabled]}
  
  # Load config
  load_config
  
  # Validate script name (alphanumeric and underscores only)
  if ! [[ $name =~ ^[a-zA-Z0-9_]+$ ]]; then
    echo "Error: Script name must contain only alphanumeric characters and underscores"
    return 1
  fi
  
  # Check if script already exists
  if script_exists "$name"; then
    echo "Error: Script '$name' already exists"
    return 1
  fi
  
  # Validate command (basic check that it's not empty)
  if [[ -z "$command" ]]; then
    echo "Error: Command cannot be empty"
    return 1
  fi
  
  # Set default interval if not provided
  if [[ -z "$interval" ]]; then
    interval=$(get_default_interval)
  fi
  
  # Validate interval is a positive integer
  if ! [[ $interval =~ ^[0-9]+$ ]] || [[ $interval -le 0 ]]; then
    echo "Error: Interval must be a positive integer"
    return 1
  fi
  
  # Determine enabled status
  local enabled=true
  if [[ "$disabled" == "true" ]]; then
    enabled=false
  fi
  
  # Add script to config
  add_script_to_config "$name" "$command" "$interval" "$enabled" "$description"
  
  echo "Script '$name' added successfully"
  echo "  Command: $command"
  echo "  Interval: $interval seconds"
  echo "  Enabled: $enabled"
  if [[ -n "$description" ]]; then
    echo "  Description: $description"
  fi
  
  # Log the addition
  log_info "Added new script: $name"
  
  return 0
}
```
2. Implement validation for script name, command, and interval
3. Add function to check if script already exists
4. Create function to add script to configuration file
5. Provide feedback on successful addition

# Test Strategy:
1. Test adding a script with all required parameters
2. Test adding a script with optional parameters
3. Verify validation rejects invalid script names
4. Test duplicate script name handling
5. Verify script is correctly added to configuration file
6. Test with various interval values including defaults
