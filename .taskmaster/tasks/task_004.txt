# Task ID: 4
# Title: Implement Logging System
# Status: done
# Dependencies: 2
# Priority: medium
# Description: Create a logging system with different log levels, proper formatting, and log rotation capabilities.
# Details:
1. Create `src/lib/logger.sh` with logging functions:
```bash
#!/usr/bin/env bash

source "${BASH_SOURCE%/*}/config.sh"

# Log levels
DEBUG=0
INFO=1
WARN=2
ERROR=3

# Current log level (default: INFO)
LOG_LEVEL=$INFO

# Get log file path from config
function get_log_file() {
  local log_file=$(yq e '.daemon.log_file' "$CONFIG_FILE")
  echo "${log_file/#~/$HOME}"
}

# Initialize log file
function init_logger() {
  local log_file=$(get_log_file)
  local log_dir=$(dirname "$log_file")
  
  if [[ ! -d "$log_dir" ]]; then
    mkdir -p "$log_dir"
  fi
  
  # Check if log rotation is needed
  if [[ -f "$log_file" ]]; then
    local size=$(stat -c%s "$log_file" 2>/dev/null || stat -f%z "$log_file")
    if [[ $size -gt 10485760 ]]; then  # 10MB in bytes
      rotate_logs
    fi
  fi
}

# Rotate log files
function rotate_logs() {
  local log_file=$(get_log_file)
  local max_logs=7
  
  # Remove oldest log if it exists
  if [[ -f "${log_file}.${max_logs}" ]]; then
    rm "${log_file}.${max_logs}"
  fi
  
  # Shift log files
  for i in $(seq $((max_logs-1)) -1 1); do
    if [[ -f "${log_file}.${i}" ]]; then
      mv "${log_file}.${i}" "${log_file}.$((i+1))"
    fi
  done
  
  # Move current log to .1
  if [[ -f "$log_file" ]]; then
    mv "$log_file" "${log_file}.1"
  fi
  
  # Create new log file
  touch "$log_file"
}

# Log message with level
function log() {
  local level=$1
  local script_name=$2
  local message=$3
  
  # Check if we should log this message based on level
  if [[ $level -lt $LOG_LEVEL ]]; then
    return
  fi
  
  # Get level name
  local level_name="UNKNOWN"
  case $level in
    $DEBUG) level_name="DEBUG" ;;
    $INFO) level_name="INFO" ;;
    $WARN) level_name="WARN" ;;
    $ERROR) level_name="ERROR" ;;
  esac
  
  # Format timestamp
  local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
  
  # Format log message
  local log_message="[$timestamp] [$level_name] "
  if [[ -n "$script_name" ]]; then
    log_message+="[$script_name] "
  fi
  log_message+="$message"
  
  # Write to log file
  init_logger
  echo "$log_message" >> "$(get_log_file)"
}

# Convenience functions for different log levels
function log_debug() { log $DEBUG "" "$1"; }
function log_info() { log $INFO "" "$1"; }
function log_warn() { log $WARN "" "$1"; }
function log_error() { log $ERROR "" "$1"; }

# Script-specific logging
function log_script_debug() { log $DEBUG "$1" "$2"; }
function log_script_info() { log $INFO "$1" "$2"; }
function log_script_warn() { log $WARN "$1" "$2"; }
function log_script_error() { log $ERROR "$1" "$2"; }
```
2. Implement log rotation based on file size (10MB)
3. Add log retention policy (7 days)
4. Create helper functions for different log levels
5. Ensure log directory exists and is writable

# Test Strategy:
1. Test logging at different log levels
2. Verify log file creation and directory structure
3. Test log rotation when file size exceeds 10MB
4. Verify log retention policy keeps only 7 days of logs
5. Test script-specific logging format
