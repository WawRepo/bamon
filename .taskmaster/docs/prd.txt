# Bash Daemon Monitor - Product Requirements Document

## Project Overview
A configurable bash daemon that monitors and executes bash scripts/code snippets at specified intervals, providing a CLI interface for management using the Bashly framework.

## Core Functionality

### 1. Daemon Core
- **Purpose**: Continuously monitor and execute configurable bash scripts/code snippets
- **Execution Model**: Run scripts at configurable intervals (e.g., every 30 seconds, 1 minute, 5 minutes)
- **Script Types**: 
  - Simple bash commands that return 0 (success) or 1 (failure)
  - HTTP health checks (e.g., `curl -s -o /dev/null -w "%{http_code}" https://google.com`)
  - Custom bash scripts with configurable execution intervals
- **Configuration**: YAML-based configuration file for script definitions and intervals
- **Logging**: Comprehensive logging with configurable levels (DEBUG, INFO, WARN, ERROR)
  - **Daemon Mode**: All output (stdout and stderr) redirected to single log file
  - **Log File**: `~/.config/bamon/daemon.log` (configurable via config.yaml)
  - **Log Rotation**: Automatic log rotation to prevent disk space issues
  - **Log Levels**: Configurable verbosity levels for different environments
- **Sandboxing**: All script executions run in isolated environment with resource limits

### 2. Script Management
- **Add Scripts**: Add new monitoring scripts with custom intervals
- **Remove Scripts**: Remove existing scripts from monitoring
- **List Scripts**: Display all configured scripts with their status
- **Script Status**: Real-time status of each script (running, failed, success)
- **Execution History**: Track execution times, success/failure rates, and output
- **Enhanced Status Check**: Comprehensive status reporting with execution details
  - **Success/Failure Status**: Clear indication of script execution results
  - **Output Capture**: Display both stdout and stderr from last execution
  - **Execution Metadata**: Show execution time, timestamp, and exit codes
  - **Intelligent Error Messages**: Context-aware error reporting with specific failure types
    - **Timeout Errors**: "Timeout after Xs" (using sandbox.timeout configuration)
    - **Memory Errors**: "Memory error" for memory-related failures
    - **Permission Issues**: "Permission denied" for access problems
    - **File Issues**: "File not found" for missing files
    - **Network Issues**: "Network error" for connection problems
    - **Custom Scripts**: Show actual output for custom failing scripts
    - **Generic Failures**: "Failed (exit code: X)" for other errors
  - **JSON Support**: Optional JSON output format for programmatic access
  - **Real-time Data**: Show current status without triggering new executions

### 3. CLI Interface (Bashly-based)
- **status**: Show current status of all monitored scripts with detailed execution results
  - Display success/failure status for each script
  - Show stdout and stderr output from last execution
  - Include execution time and timestamp
  - Support JSON output format with `--json` flag
- **add**: Add new script to monitoring with interval configuration
- **remove**: Remove script from monitoring
- **list**: List all configured scripts with details
- **now**: Execute all scripts immediately (manual trigger)
- **start**: Start the daemon process
- **stop**: Stop the daemon process
- **restart**: Restart the daemon process
- **performance**: Show system performance metrics and optimization status

### 4. Daemon Logging
- **Background Mode**: When running `bamon start --daemon`, all output is redirected to a single log file
- **Log File Location**: `~/.config/bamon/daemon.log` (configurable via `daemon.log_file` in config.yaml)
- **Output Redirection**: Both stdout and stderr are combined into the single log file using `2>&1`
- **Foreground Mode**: When running `bamon start` (without --daemon), output appears in the terminal
- **Log Content**: Includes all script execution results, errors, and daemon status messages
- **Log Rotation**: Automatic log rotation to prevent disk space issues (configurable)

### 5. Configuration Format
```yaml
daemon:
  default_interval: 60
  log_file: "~/.config/bamon/daemon.log"
  pid_file: "~/.config/bamon/bamon.pid"
  max_concurrent: 10
  history_file: "~/.config/bamon/execution_history.json"
  history_retention_days: 30

sandbox:
  timeout: 30
  max_cpu_time: 60
  max_file_size: 10240
  max_virtual_memory: 102400

performance:
  enable_monitoring: true
  load_threshold: 0.8
  cache_ttl: 30
  optimize_scheduling: true

scripts:
  - name: "health_check"
    command: "curl -s -o /dev/null -w '%{http_code}' https://google.com"
    interval: 30
    enabled: true
  - name: "disk_space"
    command: "df -h / | awk 'NR==2 {print $5}' | sed 's/%//'"
    interval: 300
    enabled: true
```

## Technical Requirements

### 1. Dependencies
- **Runtime**: bash 4.0+, curl, yq, timeout/gtimeout, standard Unix tools
- **Development**: Ruby, bashly gem, bash 4.0+
- **Optional**: systemd (for service management)

### 2. File Structure
```
bamon/
├── bamon                    # Main executable (generated by bashly)
├── bashly.yml              # Bashly configuration
├── src/
│   ├── lib/
│   │   ├── config.sh       # Configuration management
│   │   ├── execution.sh    # Script execution and daemon loop
│   │   ├── logging.sh      # Logging functions
│   │   ├── sandbox.sh      # Script sandboxing
│   │   └── performance.sh  # Performance optimization
│   └── *_command.sh        # CLI command implementations
├── config.yaml             # Daemon configuration
└── install.sh              # Installation script
```

### 3. Security Features
- **Sandboxing**: All scripts run with resource limits (CPU, memory, file size, timeout)
- **Path Isolation**: Scripts run in temporary directories with limited access
- **Resource Limits**: Configurable limits prevent system overload
- **Input Validation**: All inputs validated before execution

### 4. Status Check Implementation
- **Execution History Storage**: Store last execution results for each script
  - Success/failure status and exit codes
  - Complete stdout and stderr output
  - Execution timestamps and duration
  - Resource usage metrics
  - Intelligent error message generation
- **Status Display Format**:
  - **Human-readable**: Tabular format with clear status indicators
  - **JSON format**: Structured data with `--json` flag for API integration
  - **Filtering**: Show only failed scripts with `--failed` flag
  - **Sorting**: Sort by status, execution time, or script name
  - **Error Column**: Context-aware error messages for failed scripts
- **Error Message Intelligence**:
  - **Timeout Detection**: Analyzes exit code 124 and "timed out" output patterns
  - **Resource Error Detection**: Identifies memory, permission, and file access issues
  - **Network Error Detection**: Recognizes connection and network-related failures
  - **Custom Script Support**: Preserves original output for custom failing scripts
  - **Configuration Integration**: Uses sandbox.timeout for accurate timeout reporting
- **Data Persistence**: Store execution history in configurable location
  - Default: `~/.config/bamon/execution_history.json`
  - Configurable via `daemon.history_file` setting
  - Automatic cleanup of old entries based on retention policy

## Performance Optimization

### 1. System Load Monitoring
- **Load Detection**: Monitor system load average and prevent execution during high load
- **Resource Awareness**: Track CPU, memory, and disk usage
- **Adaptive Scheduling**: Adjust execution intervals based on system performance

### 2. Concurrent Execution Management
- **Max Concurrent**: Limit number of simultaneously running scripts
- **Queue Management**: Queue scripts when system is at capacity
- **Priority Scheduling**: Execute high-priority scripts first

### 3. Caching and Optimization
- **Configuration Caching**: Cache frequently accessed config values
- **Result Caching**: Cache script results for short periods to reduce redundant execution
- **Efficient File Operations**: Minimize disk I/O with optimized file handling

### 4. Performance Metrics
- **Execution Times**: Track and optimize script execution duration
- **Success Rates**: Monitor and report script success/failure rates
- **Resource Usage**: Track CPU, memory, and disk usage per script
- **System Health**: Overall system performance indicators

## Installation and Distribution

### 1. Installation Script (`install.sh`)
- **Automated Setup**: Single script installation for both user and system-wide
- **Dependency Check**: Validates and installs required dependencies
- **Binary Generation**: Uses bashly to generate optimized binary
- **Configuration Setup**: Creates default configuration and directories
- **Service Integration**: Optional systemd service file creation

### 2. User Installation (Runtime)
**Requirements:**
- bash 4.0+ (system default or Homebrew)
- curl (for HTTP health checks)
- yq (YAML processor)
- timeout/gtimeout (GNU coreutils)
- Standard Unix tools (awk, sed, grep, etc.)

**Process:**
1. Download `install.sh`
2. Run: `chmod +x install.sh && ./install.sh`
3. Binary installed to `/usr/local/bin/bamon` (system) or `~/.local/bin/bamon` (user)
4. Configuration created at `~/.config/bamon/config.yaml`
5. Ready to use with `bamon start`

### 3. Developer Installation (Development)
**Requirements:**
- Ruby 2.7+ (for bashly)
- bashly gem (`gem install bashly`)
- bash 4.0+ (Homebrew version recommended)
- Git (for version control)

**Process:**
1. Clone repository: `git clone <repo-url>`
2. Install bashly: `gem install bashly`
3. Generate binary: `bashly generate`
4. Test: `./bamon --help`

### 4. Cross-Platform Support
- **macOS**: Full support with Homebrew dependencies
- **Linux**: Native support with package manager dependencies
- **Windows**: WSL2 support with Linux dependencies

## Success Criteria

### 1. Functional Requirements
- ✅ Daemon runs continuously without crashes
- ✅ Scripts execute at configured intervals
- ✅ CLI commands work correctly
- ✅ Configuration management functions properly
- ✅ Logging captures all events appropriately
- ✅ Sandboxing prevents system damage
- ✅ Performance optimization reduces resource usage
- ✅ Installation script works on target platforms

### 2. Performance Requirements
- **Resource Usage**: < 10MB RAM, < 1% CPU when idle
- **Response Time**: CLI commands respond within 1 second
- **Concurrent Execution**: Support up to 10 simultaneous scripts
- **System Load**: Adapt to system load and prevent overload
- **Caching**: Improve performance for frequent operations

### 3. Security Requirements
- **Sandboxing**: All scripts run in isolated environment
- **Resource Limits**: Prevent runaway scripts from consuming resources
- **Input Validation**: All inputs validated before processing
- **Error Handling**: Graceful handling of script failures

### 4. Usability Requirements
- **Simple Installation**: One-command installation process
- **Clear Documentation**: Comprehensive README and help text
- **Intuitive CLI**: Easy-to-use command interface
- **Configuration**: Simple YAML configuration format
- **Troubleshooting**: Clear error messages and logging

## Future Enhancements

### 1. Advanced Features
- **Web Dashboard**: Web interface for monitoring and management
- **Alerting**: Email/SMS notifications for script failures
- **Metrics Export**: Prometheus/InfluxDB metrics export
- **Plugin System**: Extensible plugin architecture

### 2. Enterprise Features
- **Multi-User Support**: User-based script management
- **Centralized Management**: Central configuration management
- **Audit Logging**: Comprehensive audit trail
- **High Availability**: Clustering and failover support

### 3. Integration Features
- **CI/CD Integration**: GitHub Actions, Jenkins integration
- **Monitoring Integration**: Nagios, Zabbix, Datadog integration
- **Cloud Integration**: AWS, Azure, GCP monitoring
- **Container Support**: Docker, Kubernetes integration