name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git operations
    
    - name: Setup Bash
      run: |
        echo "Bash version:"
        bash --version
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq coreutils
        # Install yq (YAML processor)
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        # Install bats (Bash Automated Testing System)
        sudo apt-get install -y bats
    
    - name: Verify dependencies
      run: |
        echo "Dependency versions:"
        bash --version | head -1
        curl --version | head -1
        jq --version
        yq --version
        bats --version
    
    - name: Generate BAMON binary
      run: |
        # Install bashly for binary generation
        sudo gem install bashly
        bashly generate --upgrade
        chmod +x bamon
        echo "Generated binary:"
        ls -la bamon
        
        # Create /app directory and copy binary for tests
        sudo mkdir -p /app
        sudo cp bamon /app/bamon
        sudo chmod +x /app/bamon
        
        # Copy source files for tests
        sudo mkdir -p /app/src
        sudo cp -r src/* /app/src/
        sudo chmod +x /app/src/lib/*.sh
        
        # Copy samples for tests
        sudo mkdir -p /app/samples
        sudo cp -r samples/* /app/samples/
        sudo chmod +x /app/samples/*.sh
        
        echo "Binary and source files copied to /app/ for tests"
    
    - name: Test binary generation
      run: |
        # Test that the binary was generated correctly
        ./bamon --version
        ./bamon --help
    
    - name: Run basic tests
      run: |
        # Run the test suite
        echo "Running BATS tests..."
        if [ -d "test" ] && [ "$(find test -name "*.bats" | wc -l)" -gt 0 ]; then
          echo "Found $(find test -name "*.bats" | wc -l) BATS test files"
          echo "Running tests from all subdirectories..."
          
          # Run tests with descriptive names and fail on any test failure
          echo "Running command tests..."
          test_failed=false
          for test_file in $(find test/commands -name "*.bats"); do
            echo "Running $test_file..."
            if ! bats "$test_file"; then
              echo "Command tests failed in $test_file!"
              test_failed=true
            fi
          done
          if [ "$test_failed" = true ]; then
            echo "Command tests failed!"
            exit 1
          fi
          
          echo "Running daemon tests..."
          test_failed=false
          for test_file in $(find test/daemon -name "*.bats"); do
            echo "Running $test_file..."
            if ! bats "$test_file"; then
              echo "Daemon tests failed in $test_file!"
              test_failed=true
            fi
          done
          if [ "$test_failed" = true ]; then
            echo "Daemon tests failed!"
            exit 1
          fi
          
          echo "Running installation tests..."
          test_failed=false
          for test_file in $(find test/installation -name "*.bats"); do
            echo "Running $test_file..."
            if ! bats "$test_file"; then
              echo "Installation tests failed in $test_file!"
              test_failed=true
            fi
          done
          if [ "$test_failed" = true ]; then
            echo "Installation tests failed!"
            exit 1
          fi
          
          echo "Running performance tests..."
          test_failed=false
          for test_file in $(find test/performance -name "*.bats"); do
            echo "Running $test_file..."
            if ! bats "$test_file"; then
              echo "Performance tests failed in $test_file!"
              test_failed=true
            fi
          done
          if [ "$test_failed" = true ]; then
            echo "Performance tests failed!"
            exit 1
          fi
          
          echo "BATS test execution completed"
        else
          echo "No BATS test files found in test/ directory"
          echo "Available test files:"
          find test -name "*.bats" 2>/dev/null || echo "No .bats files found"
        fi
    
    - name: Test installation script
      run: |
        # Test the installation script
        echo "Testing installation script..."
        chmod +x install.sh
        # Test dry run or validation without actual installation
        ./install.sh --help || echo "Install script help not available"
    
    - name: Validate configuration
      run: |
        # Test configuration validation
        if [ -f "test/config.yaml" ]; then
          echo "Testing configuration validation..."
          # Copy test config to a temporary location and validate it
          cp test/config.yaml /tmp/test_config.yaml
          ./bamon config validate || echo "Config validation failed"
        else
          echo "No test config file found, testing default config validation..."
          ./bamon config validate || echo "Default config validation failed"
        fi
    
    - name: Test CLI commands
      run: |
        # Test basic CLI functionality
        echo "Testing CLI commands..."
        ./bamon list || { echo "List command failed!"; exit 1; }
        ./bamon status || { echo "Status command failed!"; exit 1; }
        # Performance command requires daemon to be running, so we'll test it differently
        ./bamon performance --help || { echo "Performance command help failed!"; exit 1; }
    
    - name: Check for test failures
      if: failure()
      run: |
        echo "CI workflow failed. Check the logs above for details."
        echo "Common issues:"
        echo "- Missing dependencies"
        echo "- Test failures"
        echo "- Binary generation issues"
        echo "- Configuration problems"
        echo "- Bash version compatibility issues"
