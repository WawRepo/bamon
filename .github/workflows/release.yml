name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: read
  actions: read
  pages: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git operations
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup environment
      run: |
        echo "Setting up release environment..."
        # Install minimal dependencies for release
        sudo apt-get update
        sudo apt-get install -y curl jq coreutils git
        # Install yq (YAML processor)
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        # Install bashly for binary generation
        sudo gem install bashly
        
        # Configure git
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
    
    - name: Get current version
      id: current_version
      run: |
        # Get the highest tag from main branch
        echo "Fetching all tags..."
        git fetch --tags --force
        
        # Get the highest semantic version tag
        HIGHEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Highest tag found: $HIGHEST_TAG"
        
        # Extract version number (remove 'v' prefix)
        VERSION=${HIGHEST_TAG#v}
        echo "Current version: $VERSION"
        
        # Set outputs
        echo "current_tag=$HIGHEST_TAG" >> $GITHUB_OUTPUT
        echo "current_version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Calculate new version
      id: new_version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
        BUMP_TYPE="${{ github.event.inputs.version_bump }}"
        
        echo "Current version: $CURRENT_VERSION"
        echo "Bump type: $BUMP_TYPE"
        
        # Parse version components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # Increment version based on bump type
        case $BUMP_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        NEW_TAG="v$NEW_VERSION"
        
        echo "New version: $NEW_VERSION"
        echo "New tag: $NEW_TAG"
        
        # Set outputs
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
    
    - name: Update version in bashly.yml
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        echo "Updating version in src/bashly.yml to $NEW_VERSION"
        
        # Update version in bashly.yml
        yq eval ".version = \"$NEW_VERSION\"" -i src/bashly.yml
        
        # Verify the update
        echo "Updated bashly.yml:"
        yq eval '.version' src/bashly.yml
    
    - name: Generate binary with new version
      run: |
        echo "Generating binary with new version..."
        bashly generate --upgrade
        chmod +x bamon
        
        # Verify the binary has the correct version
        echo "Generated binary version:"
        ./bamon --version
        
        # Test the binary
        ./bamon --help | head -5
    
    - name: Verify binary functionality
      run: |
        echo "Verifying binary functionality..."
        # Basic verification that the binary works
        ./bamon --version
        ./bamon --help | head -3
        echo "Binary verification completed"
    
    - name: Create git tag
      if: ${{ github.event.inputs.dry_run != 'true' }}
      run: |
        NEW_TAG="${{ steps.new_version.outputs.new_tag }}"
        echo "Creating git tag: $NEW_TAG"
        
        # Create and push the tag
        git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
        git push origin "$NEW_TAG"
        
        echo "Tag $NEW_TAG created and pushed"
    
    - name: Prepare release assets
      run: |
        echo "Preparing release assets..."
        
        # Create release directory
        mkdir -p release_assets
        
        # Copy core files
        cp bamon release_assets/
        cp install-repo.sh release_assets/
        cp README.md release_assets/
        
        # Copy directories
        cp -r docs release_assets/
        cp -r samples release_assets/
        
        # Create a simple config template
        cat > release_assets/config.yaml << 'EOF'
        daemon:
          default_interval: 60
          log_file: "~/.config/bamon/daemon.log"
          pid_file: "~/.config/bamon/bamon.pid"
          max_concurrent: 10
          history_file: "~/.config/bamon/execution_history.json"
          history_retention_days: 30

        sandbox:
          timeout: 30
          max_cpu_time: 60
          max_file_size: 10240
          max_virtual_memory: 102400

        performance:
          enable_monitoring: true
          load_threshold: 0.8
          optimize_scheduling: true

        scripts: []
        EOF
                
        # List all assets
        echo "Release assets prepared:"
        find release_assets -type f | sort
    
    - name: Create GitHub Release
      if: ${{ github.event.inputs.dry_run != 'true' }}
      run: |
        echo "Creating GitHub release ${{ steps.new_version.outputs.new_tag }}..."
        
        # Create release using GitHub CLI
        gh release create ${{ steps.new_version.outputs.new_tag }} \
          --title "Release ${{ steps.new_version.outputs.new_tag }}" \
          --notes "## BAMON ${{ steps.new_version.outputs.new_tag }}
          
          ### Installation
          
          **Quick Install (Recommended):**
          \`\`\`bash
          curl -sSL https://github.com/${{ github.repository }}/releases/download/${{ steps.new_version.outputs.new_tag }}/install-repo.sh | bash
          \`\`\`
          
          **Manual Install:**
          1. Download the \`bamon\` binary
          2. Download the \`install-repo.sh\` script
          3. Run: \`chmod +x install-repo.sh && ./install-repo.sh\`
          
          **Development Install:**
          If you have the source code, use \`install.sh\` for local development.
          
          ### What's New
          
          This release includes:
          - Automated version bumping
          - Improved CI/CD pipeline
          - Streamlined release process
          
          ### Files Included
          - \`bamon\` - Main executable
          - \`install-repo.sh\` - Installation script for releases
          - \`README.md\` - Documentation
          - \`docs/\` - Complete documentation
          - \`samples/\` - Example monitoring scripts
          - \`config.yaml\` - Default configuration template
          
          ### Verification
          \`\`\`bash
          ./bamon --version
          ./bamon --help
          \`\`\`" \
          --draft=false \
          --prerelease=false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    

    - name: Upload Release Assets
      if: ${{ github.event.inputs.dry_run != 'true' }}
      run: |
        echo "Uploading release assets..."
        
        # Upload individual files to the release
        gh release upload ${{ steps.new_version.outputs.new_tag }} release_assets/bamon
        gh release upload ${{ steps.new_version.outputs.new_tag }} release_assets/install-repo.sh
        gh release upload ${{ steps.new_version.outputs.new_tag }} release_assets/README.md
        gh release upload ${{ steps.new_version.outputs.new_tag }} release_assets/config.yaml
        
        # Upload directories as archives
        cd release_assets
        tar -czf docs.tar.gz docs/
        tar -czf samples.tar.gz samples/
        cd ..
        
        gh release upload ${{ steps.new_version.outputs.new_tag }} release_assets/docs.tar.gz
        gh release upload ${{ steps.new_version.outputs.new_tag }} release_assets/samples.tar.gz
        
        echo "All assets uploaded successfully!"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    
    - name: Build Documentation with Version
      if: ${{ github.event.inputs.dry_run != 'true' }}
      run: |
        echo "Building documentation with version ${{ steps.new_version.outputs.new_version }}..."
        
        # Install Python and MkDocs dependencies
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip
        pip3 install mkdocs requests
        
        # Install yq for YAML processing
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        
        # Create version info for documentation
        VERSION="${{ steps.new_version.outputs.new_version }}"
        TAG="${{ steps.new_version.outputs.new_tag }}"
        VERSION_INFO="Released on $(date '+%B %d, %Y')"
        
        echo "Building documentation with version: $VERSION"
        echo "Tag: $TAG"
        echo "Version info: $VERSION_INFO"
        
        # Update mkdocs.yml with version information
        yq eval ".extra.version = \"$VERSION\"" -i mkdocs.yml
        yq eval ".extra.version_info = \"$VERSION_INFO\"" -i mkdocs.yml
        
        echo "Updated mkdocs.yml:"
        yq eval '.extra' mkdocs.yml
        
        # Replace version placeholders in documentation files
        echo "Replacing version placeholders in documentation files..."
        find docs/ -name "*.md" -type f -exec sed -i "s/{{ version }}/$VERSION/g" {} \;
        find docs/ -name "*.md" -type f -exec sed -i "s/{{ tag }}/$TAG/g" {} \;
        
        echo "Version placeholders replaced:"
        echo "- {{ version }} -> $VERSION"
        echo "- {{ tag }} -> $TAG"
        
        # Build documentation with error handling
        if mkdocs build; then
          echo "Documentation built successfully with version $VERSION"
        else
          echo "Warning: Documentation build failed, creating fallback..."
          # Create a minimal fallback documentation
          mkdir -p site
          cat > site/index.html << EOF
        <!DOCTYPE html>
        <html>
        <head>
          <title>BAMON Documentation</title>
          <meta charset="utf-8">
        </head>
        <body>
          <h1>BAMON Documentation</h1>
          <p>Documentation is being updated. Please check back later.</p>
          <p>Version: $VERSION</p>
        </body>
        </html>
        EOF
          echo "Created fallback documentation"
        fi
    
    - name: Setup Pages
      if: ${{ github.event.inputs.dry_run != 'true' }}
      uses: actions/configure-pages@v4
    
    - name: Upload Documentation Artifact
      if: ${{ github.event.inputs.dry_run != 'true' }}
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./site
    
    - name: Deploy Documentation to GitHub Pages
      if: ${{ github.event.inputs.dry_run != 'true' }}
      uses: actions/deploy-pages@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Dry run summary
      if: ${{ github.event.inputs.dry_run == 'true' }}
      run: |
        echo "=== DRY RUN SUMMARY ==="
        echo "Current version: ${{ steps.current_version.outputs.current_version }}"
        echo "New version: ${{ steps.new_version.outputs.new_version }}"
        echo "New tag: ${{ steps.new_version.outputs.new_tag }}"
        echo "Bump type: ${{ github.event.inputs.version_bump }}"
        echo ""
        echo "Files that would be updated:"
        echo "- src/bashly.yml (version: ${{ steps.new_version.outputs.new_version }})"
        echo "- bamon binary (regenerated)"
        echo ""
        echo "Git operations that would be performed:"
        echo "- Create tag: ${{ steps.new_version.outputs.new_tag }}"
        echo "- Push tag to origin"
        echo ""
        echo "GitHub release that would be created:"
        echo "- Tag: ${{ steps.new_version.outputs.new_tag }}"
        echo "- Assets: bamon binary, install.sh, docs/, samples/, config.yaml"
        echo ""
        echo "To perform actual release, run without dry_run=true"
